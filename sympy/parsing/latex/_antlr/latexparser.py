# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
#
# Generated from ../LaTeX.g4, derived from latex2sympy
#     latex2sympy is licensed under the MIT license
#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
#
# Generated with antlr4
#    antlr4 is licensed under the BSD-3-Clause License
#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,130,932,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,3,2,152,8,2,1,3,1,3,1,3,1,3,1,3,1,3,5,
        3,160,8,3,10,3,12,3,163,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        5,5,174,8,5,10,5,12,5,177,9,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,185,8,
        6,10,6,12,6,188,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,198,8,7,
        1,7,1,7,1,7,5,7,203,8,7,10,7,12,7,206,9,7,1,8,1,8,1,8,5,8,211,8,
        8,10,8,12,8,214,9,8,1,9,1,9,3,9,218,8,9,1,9,1,9,5,9,222,8,9,10,9,
        12,9,225,9,9,1,9,1,9,1,10,1,10,3,10,231,8,10,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,248,
        8,13,1,13,1,13,1,13,3,13,253,8,13,1,13,1,13,1,13,1,13,1,13,3,13,
        260,8,13,5,13,262,8,13,10,13,12,13,265,9,13,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,3,15,274,8,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,
        282,8,16,10,16,12,16,285,9,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,
        293,8,17,10,17,12,17,296,9,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,
        304,8,18,10,18,12,18,307,9,18,1,19,1,19,1,19,4,19,312,8,19,11,19,
        12,19,313,3,19,316,8,19,1,20,1,20,1,20,1,20,5,20,322,8,20,10,20,
        12,20,325,9,20,3,20,327,8,20,1,21,1,21,5,21,331,8,21,10,21,12,21,
        334,9,21,1,22,1,22,5,22,338,8,22,10,22,12,22,341,9,22,1,23,1,23,
        3,23,345,8,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,353,8,24,1,25,1,
        25,1,25,1,25,3,25,359,8,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,367,
        8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        3,27,381,8,27,1,27,3,27,384,8,27,5,27,386,8,27,10,27,12,27,389,9,
        27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,401,8,
        28,1,28,3,28,404,8,28,5,28,406,8,28,10,28,12,28,409,9,28,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,3,29,418,8,29,1,30,1,30,1,30,1,30,1,
        30,3,30,425,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,443,8,31,1,32,1,32,1,32,1,
        32,1,33,4,33,450,8,33,11,33,12,33,451,1,33,1,33,1,33,1,33,5,33,458,
        8,33,10,33,12,33,461,9,33,1,33,1,33,4,33,465,8,33,11,33,12,33,466,
        3,33,469,8,33,1,34,1,34,3,34,473,8,34,1,34,3,34,476,8,34,1,34,3,
        34,479,8,34,1,34,3,34,482,8,34,3,34,484,8,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,3,34,494,8,34,1,35,1,35,1,35,1,36,4,36,500,8,
        36,11,36,12,36,501,1,36,4,36,505,8,36,11,36,12,36,506,1,36,4,36,
        510,8,36,11,36,12,36,511,1,36,4,36,515,8,36,11,36,12,36,516,3,36,
        519,8,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
        1,39,1,39,1,40,5,40,535,8,40,10,40,12,40,538,9,40,1,41,1,41,1,41,
        1,41,1,41,1,41,3,41,546,8,41,1,41,1,41,1,41,1,41,1,41,3,41,553,8,
        41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,
        44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,3,47,579,
        8,47,1,48,1,48,3,48,583,8,48,1,48,3,48,586,8,48,1,48,3,48,589,8,
        48,1,48,3,48,592,8,48,3,48,594,8,48,1,48,1,48,1,48,1,48,1,48,3,48,
        601,8,48,1,48,1,48,3,48,605,8,48,1,48,3,48,608,8,48,1,48,3,48,611,
        8,48,1,48,3,48,614,8,48,3,48,616,8,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,
        48,636,8,48,1,48,3,48,639,8,48,1,48,1,48,1,48,3,48,644,8,48,1,48,
        1,48,3,48,648,8,48,1,48,3,48,651,8,48,1,48,1,48,1,48,3,48,656,8,
        48,1,48,1,48,3,48,660,8,48,1,48,3,48,663,8,48,1,48,1,48,1,48,3,48,
        668,8,48,1,48,1,48,1,48,1,48,1,48,3,48,675,8,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,3,48,694,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,
        48,705,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,3,48,747,8,48,1,49,1,49,1,49,1,49,1,49,3,49,754,
        8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,
        767,8,50,3,50,769,8,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,787,8,52,1,52,1,52,1,
        52,5,52,792,8,52,10,52,12,52,795,9,52,1,53,1,53,1,53,5,53,800,8,
        53,10,53,12,53,803,9,53,1,54,1,54,1,54,5,54,808,8,54,10,54,12,54,
        811,9,54,1,55,1,55,1,55,1,55,1,55,3,55,818,8,55,1,56,1,56,1,57,1,
        57,1,57,1,57,1,57,1,57,3,57,828,8,57,1,58,1,58,1,58,1,58,1,58,1,
        58,3,58,836,8,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,
        60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,5,
        63,860,8,63,10,63,12,63,863,9,63,1,64,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,3,64,873,8,64,1,65,1,65,1,65,5,65,878,8,65,10,65,12,65,881,
        9,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,
        1,70,3,70,922,8,70,1,71,1,71,1,71,5,71,927,8,71,10,71,12,71,930,
        9,71,1,71,0,10,6,12,14,26,32,34,36,54,56,104,72,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,0,14,3,0,26,26,28,28,32,32,3,0,27,27,29,29,33,
        33,2,0,116,119,122,124,1,0,23,25,2,0,26,27,32,33,1,0,19,20,3,0,21,
        22,97,99,109,109,2,0,114,114,130,130,2,0,34,34,38,38,2,0,34,34,39,
        39,1,0,101,103,3,0,36,36,49,76,93,96,2,0,5,5,110,111,2,0,21,21,97,
        97,1003,0,144,1,0,0,0,2,146,1,0,0,0,4,151,1,0,0,0,6,153,1,0,0,0,
        8,164,1,0,0,0,10,168,1,0,0,0,12,178,1,0,0,0,14,197,1,0,0,0,16,207,
        1,0,0,0,18,215,1,0,0,0,20,230,1,0,0,0,22,232,1,0,0,0,24,234,1,0,
        0,0,26,252,1,0,0,0,28,266,1,0,0,0,30,273,1,0,0,0,32,275,1,0,0,0,
        34,286,1,0,0,0,36,297,1,0,0,0,38,315,1,0,0,0,40,326,1,0,0,0,42,328,
        1,0,0,0,44,335,1,0,0,0,46,344,1,0,0,0,48,346,1,0,0,0,50,354,1,0,
        0,0,52,362,1,0,0,0,54,370,1,0,0,0,56,390,1,0,0,0,58,417,1,0,0,0,
        60,424,1,0,0,0,62,442,1,0,0,0,64,444,1,0,0,0,66,449,1,0,0,0,68,493,
        1,0,0,0,70,495,1,0,0,0,72,518,1,0,0,0,74,520,1,0,0,0,76,524,1,0,
        0,0,78,528,1,0,0,0,80,536,1,0,0,0,82,539,1,0,0,0,84,554,1,0,0,0,
        86,562,1,0,0,0,88,566,1,0,0,0,90,570,1,0,0,0,92,572,1,0,0,0,94,574,
        1,0,0,0,96,746,1,0,0,0,98,753,1,0,0,0,100,755,1,0,0,0,102,772,1,
        0,0,0,104,786,1,0,0,0,106,796,1,0,0,0,108,804,1,0,0,0,110,817,1,
        0,0,0,112,819,1,0,0,0,114,821,1,0,0,0,116,829,1,0,0,0,118,837,1,
        0,0,0,120,842,1,0,0,0,122,847,1,0,0,0,124,851,1,0,0,0,126,856,1,
        0,0,0,128,872,1,0,0,0,130,874,1,0,0,0,132,882,1,0,0,0,134,890,1,
        0,0,0,136,898,1,0,0,0,138,906,1,0,0,0,140,921,1,0,0,0,142,923,1,
        0,0,0,144,145,7,0,0,0,145,1,1,0,0,0,146,147,7,1,0,0,147,3,1,0,0,
        0,148,152,3,6,3,0,149,152,3,12,6,0,150,152,3,10,5,0,151,148,1,0,
        0,0,151,149,1,0,0,0,151,150,1,0,0,0,152,5,1,0,0,0,153,154,6,3,-1,
        0,154,155,3,30,15,0,155,161,1,0,0,0,156,157,10,2,0,0,157,158,7,2,
        0,0,158,160,3,6,3,3,159,156,1,0,0,0,160,163,1,0,0,0,161,159,1,0,
        0,0,161,162,1,0,0,0,162,7,1,0,0,0,163,161,1,0,0,0,164,165,3,6,3,
        0,165,166,7,2,0,0,166,167,3,6,3,0,167,9,1,0,0,0,168,175,3,8,4,0,
        169,170,5,110,0,0,170,174,3,8,4,0,171,172,5,1,0,0,172,174,3,8,4,
        0,173,169,1,0,0,0,173,171,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,
        0,175,176,1,0,0,0,176,11,1,0,0,0,177,175,1,0,0,0,178,179,6,6,-1,
        0,179,180,3,14,7,0,180,186,1,0,0,0,181,182,10,2,0,0,182,183,5,116,
        0,0,183,185,3,12,6,3,184,181,1,0,0,0,185,188,1,0,0,0,186,184,1,0,
        0,0,186,187,1,0,0,0,187,13,1,0,0,0,188,186,1,0,0,0,189,190,6,7,-1,
        0,190,191,5,26,0,0,191,192,3,14,7,0,192,193,7,3,0,0,193,194,3,14,
        7,0,194,195,5,27,0,0,195,198,1,0,0,0,196,198,3,18,9,0,197,189,1,
        0,0,0,197,196,1,0,0,0,198,204,1,0,0,0,199,200,10,3,0,0,200,201,7,
        3,0,0,201,203,3,14,7,4,202,199,1,0,0,0,203,206,1,0,0,0,204,202,1,
        0,0,0,204,205,1,0,0,0,205,15,1,0,0,0,206,204,1,0,0,0,207,212,3,20,
        10,0,208,209,5,2,0,0,209,211,3,20,10,0,210,208,1,0,0,0,211,214,1,
        0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,17,1,0,0,0,214,212,1,0,
        0,0,215,217,3,0,0,0,216,218,3,20,10,0,217,216,1,0,0,0,217,218,1,
        0,0,0,218,223,1,0,0,0,219,220,5,2,0,0,220,222,3,20,10,0,221,219,
        1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,
        1,0,0,0,225,223,1,0,0,0,226,227,3,2,1,0,227,19,1,0,0,0,228,231,3,
        18,9,0,229,231,3,6,3,0,230,228,1,0,0,0,230,229,1,0,0,0,231,21,1,
        0,0,0,232,233,7,4,0,0,233,23,1,0,0,0,234,235,3,22,11,0,235,236,3,
        30,15,0,236,237,5,2,0,0,237,238,3,30,15,0,238,239,3,22,11,0,239,
        25,1,0,0,0,240,241,6,13,-1,0,241,242,5,26,0,0,242,243,3,26,13,0,
        243,247,7,3,0,0,244,248,3,26,13,0,245,248,3,18,9,0,246,248,3,68,
        34,0,247,244,1,0,0,0,247,245,1,0,0,0,247,246,1,0,0,0,248,249,1,0,
        0,0,249,250,5,27,0,0,250,253,1,0,0,0,251,253,3,24,12,0,252,240,1,
        0,0,0,252,251,1,0,0,0,253,263,1,0,0,0,254,255,10,3,0,0,255,259,7,
        3,0,0,256,260,3,26,13,0,257,260,3,18,9,0,258,260,3,68,34,0,259,256,
        1,0,0,0,259,257,1,0,0,0,259,258,1,0,0,0,260,262,1,0,0,0,261,254,
        1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,27,1,
        0,0,0,265,263,1,0,0,0,266,267,3,30,15,0,267,268,5,116,0,0,268,269,
        3,30,15,0,269,29,1,0,0,0,270,274,3,104,52,0,271,274,3,26,13,0,272,
        274,3,32,16,0,273,270,1,0,0,0,273,271,1,0,0,0,273,272,1,0,0,0,274,
        31,1,0,0,0,275,276,6,16,-1,0,276,277,3,34,17,0,277,283,1,0,0,0,278,
        279,10,2,0,0,279,280,7,5,0,0,280,282,3,32,16,3,281,278,1,0,0,0,282,
        285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,33,1,0,0,0,285,283,
        1,0,0,0,286,287,6,17,-1,0,287,288,3,38,19,0,288,294,1,0,0,0,289,
        290,10,2,0,0,290,291,7,6,0,0,291,293,3,34,17,3,292,289,1,0,0,0,293,
        296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,35,1,0,0,0,296,294,
        1,0,0,0,297,298,6,18,-1,0,298,299,3,40,20,0,299,305,1,0,0,0,300,
        301,10,2,0,0,301,302,7,6,0,0,302,304,3,36,18,3,303,300,1,0,0,0,304,
        307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,37,1,0,0,0,307,305,
        1,0,0,0,308,309,7,5,0,0,309,316,3,38,19,0,310,312,3,42,21,0,311,
        310,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,
        316,1,0,0,0,315,308,1,0,0,0,315,311,1,0,0,0,316,39,1,0,0,0,317,318,
        7,5,0,0,318,327,3,40,20,0,319,323,3,42,21,0,320,322,3,44,22,0,321,
        320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,
        327,1,0,0,0,325,323,1,0,0,0,326,317,1,0,0,0,326,319,1,0,0,0,327,
        41,1,0,0,0,328,332,3,54,27,0,329,331,3,46,23,0,330,329,1,0,0,0,331,
        334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,43,1,0,0,0,334,332,
        1,0,0,0,335,339,3,56,28,0,336,338,3,46,23,0,337,336,1,0,0,0,338,
        341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,45,1,0,0,0,341,339,
        1,0,0,0,342,345,5,128,0,0,343,345,3,48,24,0,344,342,1,0,0,0,344,
        343,1,0,0,0,345,47,1,0,0,0,346,352,5,34,0,0,347,353,3,52,26,0,348,
        353,3,50,25,0,349,350,3,52,26,0,350,351,3,50,25,0,351,353,1,0,0,
        0,352,347,1,0,0,0,352,348,1,0,0,0,352,349,1,0,0,0,353,49,1,0,0,0,
        354,355,5,107,0,0,355,358,5,28,0,0,356,359,3,30,15,0,357,359,3,28,
        14,0,358,356,1,0,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,361,5,29,
        0,0,361,51,1,0,0,0,362,363,5,108,0,0,363,366,5,28,0,0,364,367,3,
        30,15,0,365,367,3,28,14,0,366,364,1,0,0,0,366,365,1,0,0,0,367,368,
        1,0,0,0,368,369,5,29,0,0,369,53,1,0,0,0,370,371,6,27,-1,0,371,372,
        3,58,29,0,372,387,1,0,0,0,373,374,10,2,0,0,374,380,5,108,0,0,375,
        381,3,68,34,0,376,377,5,28,0,0,377,378,3,30,15,0,378,379,5,29,0,
        0,379,381,1,0,0,0,380,375,1,0,0,0,380,376,1,0,0,0,381,383,1,0,0,
        0,382,384,3,114,57,0,383,382,1,0,0,0,383,384,1,0,0,0,384,386,1,0,
        0,0,385,373,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,387,388,1,0,
        0,0,388,55,1,0,0,0,389,387,1,0,0,0,390,391,6,28,-1,0,391,392,3,60,
        30,0,392,407,1,0,0,0,393,394,10,2,0,0,394,400,5,108,0,0,395,401,
        3,68,34,0,396,397,5,28,0,0,397,398,3,30,15,0,398,399,5,29,0,0,399,
        401,1,0,0,0,400,395,1,0,0,0,400,396,1,0,0,0,401,403,1,0,0,0,402,
        404,3,114,57,0,403,402,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,
        393,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,
        57,1,0,0,0,409,407,1,0,0,0,410,418,3,62,31,0,411,418,3,64,32,0,412,
        418,3,96,48,0,413,418,3,68,34,0,414,418,3,86,43,0,415,418,3,88,44,
        0,416,418,3,122,61,0,417,410,1,0,0,0,417,411,1,0,0,0,417,412,1,0,
        0,0,417,413,1,0,0,0,417,414,1,0,0,0,417,415,1,0,0,0,417,416,1,0,
        0,0,418,59,1,0,0,0,419,425,3,62,31,0,420,425,3,64,32,0,421,425,3,
        68,34,0,422,425,3,86,43,0,423,425,3,88,44,0,424,419,1,0,0,0,424,
        420,1,0,0,0,424,421,1,0,0,0,424,422,1,0,0,0,424,423,1,0,0,0,425,
        61,1,0,0,0,426,427,5,26,0,0,427,428,3,30,15,0,428,429,5,27,0,0,429,
        443,1,0,0,0,430,431,5,32,0,0,431,432,3,30,15,0,432,433,5,33,0,0,
        433,443,1,0,0,0,434,435,5,28,0,0,435,436,3,30,15,0,436,437,5,29,
        0,0,437,443,1,0,0,0,438,439,5,30,0,0,439,440,3,30,15,0,440,441,5,
        31,0,0,441,443,1,0,0,0,442,426,1,0,0,0,442,430,1,0,0,0,442,434,1,
        0,0,0,442,438,1,0,0,0,443,63,1,0,0,0,444,445,5,34,0,0,445,446,3,
        30,15,0,446,447,5,34,0,0,447,65,1,0,0,0,448,450,5,115,0,0,449,448,
        1,0,0,0,450,451,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,459,
        1,0,0,0,453,454,5,1,0,0,454,455,5,115,0,0,455,456,5,115,0,0,456,
        458,5,115,0,0,457,453,1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,
        460,1,0,0,0,460,468,1,0,0,0,461,459,1,0,0,0,462,464,5,3,0,0,463,
        465,5,115,0,0,464,463,1,0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,
        467,1,0,0,0,467,469,1,0,0,0,468,462,1,0,0,0,468,469,1,0,0,0,469,
        67,1,0,0,0,470,483,7,7,0,0,471,473,3,114,57,0,472,471,1,0,0,0,472,
        473,1,0,0,0,473,475,1,0,0,0,474,476,5,129,0,0,475,474,1,0,0,0,475,
        476,1,0,0,0,476,484,1,0,0,0,477,479,5,129,0,0,478,477,1,0,0,0,478,
        479,1,0,0,0,479,481,1,0,0,0,480,482,3,114,57,0,481,480,1,0,0,0,481,
        482,1,0,0,0,482,484,1,0,0,0,483,472,1,0,0,0,483,478,1,0,0,0,484,
        494,1,0,0,0,485,494,3,66,33,0,486,494,5,112,0,0,487,494,3,78,39,
        0,488,494,3,82,41,0,489,494,3,84,42,0,490,494,3,74,37,0,491,494,
        3,76,38,0,492,494,3,70,35,0,493,470,1,0,0,0,493,485,1,0,0,0,493,
        486,1,0,0,0,493,487,1,0,0,0,493,488,1,0,0,0,493,489,1,0,0,0,493,
        490,1,0,0,0,493,491,1,0,0,0,493,492,1,0,0,0,494,69,1,0,0,0,495,496,
        5,105,0,0,496,497,3,72,36,0,497,71,1,0,0,0,498,500,5,114,0,0,499,
        498,1,0,0,0,500,501,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,
        504,1,0,0,0,503,505,5,114,0,0,504,503,1,0,0,0,505,506,1,0,0,0,506,
        504,1,0,0,0,506,507,1,0,0,0,507,509,1,0,0,0,508,510,5,114,0,0,509,
        508,1,0,0,0,510,511,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,
        519,1,0,0,0,513,515,5,114,0,0,514,513,1,0,0,0,515,516,1,0,0,0,516,
        514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,499,1,0,0,0,518,
        514,1,0,0,0,519,73,1,0,0,0,520,521,5,40,0,0,521,522,3,30,15,0,522,
        523,7,8,0,0,523,75,1,0,0,0,524,525,7,9,0,0,525,526,3,30,15,0,526,
        527,5,41,0,0,527,77,1,0,0,0,528,529,5,104,0,0,529,530,5,28,0,0,530,
        531,3,80,40,0,531,532,5,29,0,0,532,79,1,0,0,0,533,535,5,114,0,0,
        534,533,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,
        537,81,1,0,0,0,538,536,1,0,0,0,539,545,5,100,0,0,540,546,5,115,0,
        0,541,542,5,28,0,0,542,543,3,30,15,0,543,544,5,29,0,0,544,546,1,
        0,0,0,545,540,1,0,0,0,545,541,1,0,0,0,546,552,1,0,0,0,547,553,5,
        115,0,0,548,549,5,28,0,0,549,550,3,30,15,0,550,551,5,29,0,0,551,
        553,1,0,0,0,552,547,1,0,0,0,552,548,1,0,0,0,553,83,1,0,0,0,554,555,
        7,10,0,0,555,556,5,28,0,0,556,557,3,30,15,0,557,558,5,29,0,0,558,
        559,5,28,0,0,559,560,3,30,15,0,560,561,5,29,0,0,561,85,1,0,0,0,562,
        563,5,88,0,0,563,564,3,30,15,0,564,565,5,89,0,0,565,87,1,0,0,0,566,
        567,5,90,0,0,567,568,3,30,15,0,568,569,5,91,0,0,569,89,1,0,0,0,570,
        571,7,11,0,0,571,91,1,0,0,0,572,573,7,7,0,0,573,93,1,0,0,0,574,575,
        3,92,46,0,575,578,5,106,0,0,576,579,3,92,46,0,577,579,3,94,47,0,
        578,576,1,0,0,0,578,577,1,0,0,0,579,95,1,0,0,0,580,593,3,90,45,0,
        581,583,3,114,57,0,582,581,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,
        0,584,586,3,116,58,0,585,584,1,0,0,0,585,586,1,0,0,0,586,594,1,0,
        0,0,587,589,3,116,58,0,588,587,1,0,0,0,588,589,1,0,0,0,589,591,1,
        0,0,0,590,592,3,114,57,0,591,590,1,0,0,0,591,592,1,0,0,0,592,594,
        1,0,0,0,593,582,1,0,0,0,593,588,1,0,0,0,594,600,1,0,0,0,595,596,
        5,26,0,0,596,597,3,110,55,0,597,598,5,27,0,0,598,601,1,0,0,0,599,
        601,3,112,56,0,600,595,1,0,0,0,600,599,1,0,0,0,601,747,1,0,0,0,602,
        615,7,7,0,0,603,605,3,114,57,0,604,603,1,0,0,0,604,605,1,0,0,0,605,
        607,1,0,0,0,606,608,5,129,0,0,607,606,1,0,0,0,607,608,1,0,0,0,608,
        616,1,0,0,0,609,611,5,129,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,
        613,1,0,0,0,612,614,3,114,57,0,613,612,1,0,0,0,613,614,1,0,0,0,614,
        616,1,0,0,0,615,604,1,0,0,0,615,610,1,0,0,0,616,617,1,0,0,0,617,
        618,5,26,0,0,618,619,3,98,49,0,619,620,5,27,0,0,620,747,1,0,0,0,
        621,622,5,26,0,0,622,623,3,94,47,0,623,624,5,27,0,0,624,625,5,26,
        0,0,625,626,3,98,49,0,626,627,5,27,0,0,627,747,1,0,0,0,628,635,5,
        44,0,0,629,630,3,114,57,0,630,631,3,116,58,0,631,636,1,0,0,0,632,
        633,3,116,58,0,633,634,3,114,57,0,634,636,1,0,0,0,635,629,1,0,0,
        0,635,632,1,0,0,0,635,636,1,0,0,0,636,643,1,0,0,0,637,639,3,32,16,
        0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,644,5,112,
        0,0,641,644,3,82,41,0,642,644,3,32,16,0,643,638,1,0,0,0,643,641,
        1,0,0,0,643,642,1,0,0,0,644,747,1,0,0,0,645,647,5,45,0,0,646,648,
        3,114,57,0,647,646,1,0,0,0,647,648,1,0,0,0,648,655,1,0,0,0,649,651,
        3,32,16,0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,656,
        5,113,0,0,653,656,3,82,41,0,654,656,3,32,16,0,655,650,1,0,0,0,655,
        653,1,0,0,0,655,654,1,0,0,0,656,747,1,0,0,0,657,659,5,46,0,0,658,
        660,3,114,57,0,659,658,1,0,0,0,659,660,1,0,0,0,660,667,1,0,0,0,661,
        663,3,32,16,0,662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,
        668,5,112,0,0,665,668,3,82,41,0,666,668,3,32,16,0,667,662,1,0,0,
        0,667,665,1,0,0,0,667,666,1,0,0,0,668,747,1,0,0,0,669,674,5,92,0,
        0,670,671,5,32,0,0,671,672,3,30,15,0,672,673,5,33,0,0,673,675,1,
        0,0,0,674,670,1,0,0,0,674,675,1,0,0,0,675,676,1,0,0,0,676,677,5,
        28,0,0,677,678,3,30,15,0,678,679,5,29,0,0,679,747,1,0,0,0,680,693,
        5,47,0,0,681,682,3,118,59,0,682,683,3,116,58,0,683,694,1,0,0,0,684,
        685,3,114,57,0,685,686,3,116,58,0,686,694,1,0,0,0,687,688,3,116,
        58,0,688,689,3,118,59,0,689,694,1,0,0,0,690,691,3,116,58,0,691,692,
        3,114,57,0,692,694,1,0,0,0,693,681,1,0,0,0,693,684,1,0,0,0,693,687,
        1,0,0,0,693,690,1,0,0,0,694,695,1,0,0,0,695,696,3,34,17,0,696,747,
        1,0,0,0,697,704,5,48,0,0,698,699,3,118,59,0,699,700,3,116,58,0,700,
        705,1,0,0,0,701,702,3,116,58,0,702,703,3,118,59,0,703,705,1,0,0,
        0,704,698,1,0,0,0,704,701,1,0,0,0,705,706,1,0,0,0,706,707,3,34,17,
        0,707,747,1,0,0,0,708,709,5,42,0,0,709,710,3,100,50,0,710,711,3,
        34,17,0,711,747,1,0,0,0,712,713,5,77,0,0,713,714,3,108,54,0,714,
        715,5,78,0,0,715,747,1,0,0,0,716,717,5,79,0,0,717,718,3,108,54,0,
        718,719,5,80,0,0,719,747,1,0,0,0,720,721,5,81,0,0,721,722,3,130,
        65,0,722,723,5,82,0,0,723,747,1,0,0,0,724,725,5,83,0,0,725,726,3,
        130,65,0,726,727,5,84,0,0,727,747,1,0,0,0,728,729,5,28,0,0,729,730,
        5,85,0,0,730,731,3,126,63,0,731,732,5,86,0,0,732,733,5,3,0,0,733,
        747,1,0,0,0,734,735,5,87,0,0,735,736,3,140,70,0,736,737,5,86,0,0,
        737,747,1,0,0,0,738,739,5,81,0,0,739,740,3,142,71,0,740,741,5,82,
        0,0,741,747,1,0,0,0,742,743,5,83,0,0,743,744,3,142,71,0,744,745,
        5,84,0,0,745,747,1,0,0,0,746,580,1,0,0,0,746,602,1,0,0,0,746,621,
        1,0,0,0,746,628,1,0,0,0,746,645,1,0,0,0,746,657,1,0,0,0,746,669,
        1,0,0,0,746,680,1,0,0,0,746,697,1,0,0,0,746,708,1,0,0,0,746,712,
        1,0,0,0,746,716,1,0,0,0,746,720,1,0,0,0,746,724,1,0,0,0,746,728,
        1,0,0,0,746,734,1,0,0,0,746,738,1,0,0,0,746,742,1,0,0,0,747,97,1,
        0,0,0,748,749,3,30,15,0,749,750,5,2,0,0,750,751,3,98,49,0,751,754,
        1,0,0,0,752,754,3,30,15,0,753,748,1,0,0,0,753,752,1,0,0,0,754,99,
        1,0,0,0,755,756,5,107,0,0,756,757,5,28,0,0,757,758,7,7,0,0,758,759,
        5,43,0,0,759,768,3,30,15,0,760,766,5,108,0,0,761,762,5,28,0,0,762,
        763,7,5,0,0,763,767,5,29,0,0,764,767,5,19,0,0,765,767,5,20,0,0,766,
        761,1,0,0,0,766,764,1,0,0,0,766,765,1,0,0,0,767,769,1,0,0,0,768,
        760,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,771,5,29,0,0,771,
        101,1,0,0,0,772,773,5,28,0,0,773,774,7,7,0,0,774,775,5,34,0,0,775,
        776,3,6,3,0,776,777,5,29,0,0,777,103,1,0,0,0,778,779,6,52,-1,0,779,
        780,5,26,0,0,780,781,3,104,52,0,781,782,7,3,0,0,782,783,3,104,52,
        0,783,784,5,27,0,0,784,787,1,0,0,0,785,787,3,102,51,0,786,778,1,
        0,0,0,786,785,1,0,0,0,787,793,1,0,0,0,788,789,10,3,0,0,789,790,7,
        3,0,0,790,792,3,104,52,4,791,788,1,0,0,0,792,795,1,0,0,0,793,791,
        1,0,0,0,793,794,1,0,0,0,794,105,1,0,0,0,795,793,1,0,0,0,796,801,
        3,30,15,0,797,798,5,111,0,0,798,800,3,30,15,0,799,797,1,0,0,0,800,
        803,1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,802,107,1,0,0,0,803,
        801,1,0,0,0,804,809,3,106,53,0,805,806,5,4,0,0,806,808,3,106,53,
        0,807,805,1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,
        0,810,109,1,0,0,0,811,809,1,0,0,0,812,818,3,30,15,0,813,814,3,30,
        15,0,814,815,5,2,0,0,815,816,3,110,55,0,816,818,1,0,0,0,817,812,
        1,0,0,0,817,813,1,0,0,0,818,111,1,0,0,0,819,820,3,36,18,0,820,113,
        1,0,0,0,821,827,5,107,0,0,822,828,3,68,34,0,823,824,5,28,0,0,824,
        825,3,30,15,0,825,826,5,29,0,0,826,828,1,0,0,0,827,822,1,0,0,0,827,
        823,1,0,0,0,828,115,1,0,0,0,829,835,5,108,0,0,830,836,3,68,34,0,
        831,832,5,28,0,0,832,833,3,30,15,0,833,834,5,29,0,0,834,836,1,0,
        0,0,835,830,1,0,0,0,835,831,1,0,0,0,836,117,1,0,0,0,837,838,5,107,
        0,0,838,839,5,28,0,0,839,840,3,28,14,0,840,841,5,29,0,0,841,119,
        1,0,0,0,842,843,5,107,0,0,843,844,5,28,0,0,844,845,3,28,14,0,845,
        846,5,29,0,0,846,121,1,0,0,0,847,848,5,118,0,0,848,849,3,110,55,
        0,849,850,5,122,0,0,850,123,1,0,0,0,851,852,3,30,15,0,852,853,5,
        111,0,0,853,854,5,5,0,0,854,855,3,6,3,0,855,125,1,0,0,0,856,861,
        3,124,62,0,857,858,5,4,0,0,858,860,3,124,62,0,859,857,1,0,0,0,860,
        863,1,0,0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,127,1,0,0,0,863,
        861,1,0,0,0,864,873,3,30,15,0,865,866,3,30,15,0,866,867,7,12,0,0,
        867,868,3,6,3,0,868,873,1,0,0,0,869,870,3,30,15,0,870,871,5,125,
        0,0,871,873,1,0,0,0,872,864,1,0,0,0,872,865,1,0,0,0,872,869,1,0,
        0,0,873,129,1,0,0,0,874,879,3,128,64,0,875,876,5,4,0,0,876,878,3,
        128,64,0,877,875,1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,880,
        1,0,0,0,880,131,1,0,0,0,881,879,1,0,0,0,882,883,3,66,33,0,883,884,
        5,4,0,0,884,885,5,19,0,0,885,886,3,66,33,0,886,887,5,4,0,0,887,888,
        5,35,0,0,888,889,3,66,33,0,889,133,1,0,0,0,890,891,3,66,33,0,891,
        892,5,4,0,0,892,893,5,20,0,0,893,894,3,66,33,0,894,895,5,4,0,0,895,
        896,5,35,0,0,896,897,3,66,33,0,897,135,1,0,0,0,898,899,3,66,33,0,
        899,900,5,4,0,0,900,901,7,13,0,0,901,902,3,66,33,0,902,903,5,4,0,
        0,903,904,5,35,0,0,904,905,3,66,33,0,905,137,1,0,0,0,906,907,3,66,
        33,0,907,908,5,4,0,0,908,909,3,66,33,0,909,910,5,28,0,0,910,911,
        5,36,0,0,911,912,5,28,0,0,912,913,5,37,0,0,913,914,3,66,33,0,914,
        915,5,29,0,0,915,916,5,29,0,0,916,139,1,0,0,0,917,922,3,132,66,0,
        918,922,3,134,67,0,919,922,3,136,68,0,920,922,3,138,69,0,921,917,
        1,0,0,0,921,918,1,0,0,0,921,919,1,0,0,0,921,920,1,0,0,0,922,141,
        1,0,0,0,923,928,3,6,3,0,924,925,5,4,0,0,925,927,3,6,3,0,926,924,
        1,0,0,0,927,930,1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,0,929,143,
        1,0,0,0,930,928,1,0,0,0,96,151,161,173,175,186,197,204,212,217,223,
        230,247,252,259,263,273,283,294,305,313,315,323,326,332,339,344,
        352,358,366,380,383,387,400,403,407,417,424,442,451,459,466,468,
        472,475,478,481,483,493,501,506,511,516,518,536,545,552,578,582,
        585,588,591,593,600,604,607,610,613,615,635,638,643,647,650,655,
        659,662,667,674,693,704,746,753,766,768,786,793,801,809,817,827,
        835,861,872,879,921,928
    ]

class LaTeXParser ( Parser ):

    grammarFileName = "LaTeX.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'~'", "'.'", "'\\\\'", "'if'",
                     "'\\ '", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "'\\quad'", "'\\qquad'", "<INVALID>", "'\\negmedspace'",
                     "'\\negthickspace'", "'\\left'", "'\\right'", "<INVALID>",
                     "'+'", "<INVALID>", "'*'", "'/'", "'\\cup'", "<INVALID>",
                     "'\\cap'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "'\\{'", "'\\}'", "<INVALID>", "<INVALID>", "<INVALID>",
                     "'\\hline'", "'\\overline'", "'\\smash{\\big)}'", "'\\right|'",
                     "'\\left|'", "'\\langle'", "'\\rangle'", "'\\lim'",
                     "<INVALID>", "<INVALID>", "'\\iint'", "'\\oint'", "'\\sum'",
                     "'\\prod'", "'\\exp'", "'\\log'", "'\\lg'", "'\\ln'",
                     "'\\sin'", "'\\cos'", "'\\tan'", "'\\csc'", "'\\sec'",
                     "'\\cot'", "'\\arcsin'", "'\\arccos'", "'\\arctan'",
                     "'\\arccsc'", "'\\arcsec'", "'\\arccot'", "'\\sinh'",
                     "'\\sech'", "'\\cosh'", "'\\csch'", "'\\tanh'", "'\\coth'",
                     "'\\arcsinh'", "'\\arcsech'", "'\\arccosh'", "'\\arccsch'",
                     "'\\arctanh'", "'\\arccoth'", "'\\begin{bmatrix}'",
                     "'\\end{bmatrix}'", "'\\begin{vmatrix}'", "'\\end{vmatrix}'",
                     "'\\begin{almatrix}'", "'\\end{almatrix}'", "'\\begin{armatrix}'",
                     "'\\end{armatrix}'", "'\\begin{array}{lc}'", "'\\end{array}'",
                     "'\\begin{array}{r}'", "'\\lfloor'", "'\\rfloor'",
                     "'\\lceil'", "'\\rceil'", "'\\sqrt'", "'\\abs'", "'\\Re'",
                     "'\\Im'", "'\\arg'", "'\\times'", "'\\cdot'", "'\\div'",
                     "<INVALID>", "'\\binom'", "'\\dbinom'", "'\\tbinom'",
                     "'\\mathit'", "'\\angle'", "'\\circ'", "'_'", "'^'",
                     "':'", "';'", "'&'", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "'\\neq'", "<INVALID>", "<INVALID>",
                     "'\\leqq'", "'\\leqslant'", "<INVALID>", "<INVALID>",
                     "'\\equiv'", "'otherwise'", "'\\geqq'", "'\\geqslant'",
                     "'!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                      "<INVALID>", "<INVALID>", "EWS", "WS", "THINSPACE",
                      "MEDSPACE", "THICKSPACE", "QUAD", "QQUAD", "NEGTHINSPACE",
                      "NEGMEDSPACE", "NEGTHICKSPACE", "CMD_LEFT", "CMD_RIGHT",
                      "IGNORE", "ADD", "SUB", "MUL", "DIV", "SET_ADD", "SET_SUB",
                      "SET_INTERSECT", "L_PAREN", "R_PAREN", "L_BRACE",
                      "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL", "L_BRACKET",
                      "R_BRACKET", "BAR", "HLINE", "OVERLINE", "SMASH_BIG",
                      "R_BAR", "L_BAR", "L_ANGLE", "R_ANGLE", "FUNC_LIM",
                      "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_IINT", "FUNC_OINT",
                      "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", "FUNC_LG",
                      "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC",
                      "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS",
                      "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT",
                      "FUNC_SINH", "FUNC_SECH", "FUNC_COSH", "FUNC_CSCH",
                      "FUNC_TANH", "FUNC_COTH", "FUNC_ARCSINH", "FUNC_ARCSECH",
                      "FUNC_ARCCOSH", "FUNC_ARCCSCH", "FUNC_ARCTANH", "FUNC_ARCCOTH",
                      "FUNC_MATRIX_START", "FUNC_MATRIX_END", "FUNC_MATRIX_DETERMINENT_START",
                      "FUNC_MATRIX_DETERMINENT_END", "FUNC_AL_MATRIX_PIECEWISE_START",
                      "FUNC_AL_MATRIX_PIECEWISE_END", "FUNC_AR_MATRIX_PIECEWISE_START",
                      "FUNC_AR_MATRIX_PIECEWISE_END", "FUNC_PIECEWISE_START",
                      "FUNC_ARRAY_END", "FUNC_CALCULATION_START", "L_FLOOR",
                      "R_FLOOR", "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_ABS",
                      "FUNC_RE", "FUNC_IM", "FUNC_ARG", "CMD_TIMES", "CMD_CDOT",
                      "CMD_DIV", "CMD_FRAC", "CMD_BINOM", "CMD_DBINOM",
                      "CMD_TBINOM", "CMD_MATHIT", "CMD_ANGLE", "CMD_CIRCLE",
                      "UNDERSCORE", "CARET", "COLON", "SEMI_COLON", "AMP",
                      "DIFFERENTIAL", "MULTI_DIFFERENTIAL", "LETTER", "DIGIT",
                      "EQUAL", "NEQ", "LT", "LTE", "LTE_Q", "LTE_S", "GT",
                      "GTE", "EQUIV", "OTHERWISE", "GTE_Q", "GTE_S", "BANG",
                      "SINGLE_QUOTES", "SYMBOL" ]

    RULE_left_parentheses = 0
    RULE_right_parentheses = 1
    RULE_math = 2
    RULE_relation = 3
    RULE_equation = 4
    RULE_equation_list = 5
    RULE_struct_relation = 6
    RULE_struct_expr = 7
    RULE_struct_form = 8
    RULE_struct_value = 9
    RULE_value = 10
    RULE_interval_opr = 11
    RULE_interval = 12
    RULE_interval_expr = 13
    RULE_equality = 14
    RULE_expr = 15
    RULE_additive = 16
    RULE_mp = 17
    RULE_mp_nofunc = 18
    RULE_unary = 19
    RULE_unary_nofunc = 20
    RULE_postfix = 21
    RULE_postfix_nofunc = 22
    RULE_postfix_op = 23
    RULE_eval_at = 24
    RULE_eval_at_sub = 25
    RULE_eval_at_sup = 26
    RULE_exp = 27
    RULE_exp_nofunc = 28
    RULE_comp = 29
    RULE_comp_nofunc = 30
    RULE_group = 31
    RULE_abs_group = 32
    RULE_number = 33
    RULE_atom = 34
    RULE_angle = 35
    RULE_angle_points = 36
    RULE_bra = 37
    RULE_ket = 38
    RULE_mathit = 39
    RULE_mathit_text = 40
    RULE_frac = 41
    RULE_binom = 42
    RULE_floor = 43
    RULE_ceil = 44
    RULE_func_normal = 45
    RULE_func_name = 46
    RULE_func_composition = 47
    RULE_func = 48
    RULE_args = 49
    RULE_limit_sub = 50
    RULE_set_notation_sub = 51
    RULE_set_notation_sub_expr = 52
    RULE_matrix_row = 53
    RULE_matrix = 54
    RULE_func_arg = 55
    RULE_func_arg_noparens = 56
    RULE_subexpr = 57
    RULE_supexpr = 58
    RULE_subeq = 59
    RULE_supeq = 60
    RULE_vector = 61
    RULE_piecewise_func = 62
    RULE_piecewise = 63
    RULE_matrix_piecewise_func = 64
    RULE_matrix_piecewise = 65
    RULE_calculation_add = 66
    RULE_calculation_sub = 67
    RULE_calculation_mul = 68
    RULE_calculation_div = 69
    RULE_calculation = 70
    RULE_matrix_relation = 71

    ruleNames =  [ "left_parentheses", "right_parentheses", "math", "relation",
                   "equation", "equation_list", "struct_relation", "struct_expr",
                   "struct_form", "struct_value", "value", "interval_opr",
                   "interval", "interval_expr", "equality", "expr", "additive",
                   "mp", "mp_nofunc", "unary", "unary_nofunc", "postfix",
                   "postfix_nofunc", "postfix_op", "eval_at", "eval_at_sub",
                   "eval_at_sup", "exp", "exp_nofunc", "comp", "comp_nofunc",
                   "group", "abs_group", "number", "atom", "angle", "angle_points",
                   "bra", "ket", "mathit", "mathit_text", "frac", "binom",
                   "floor", "ceil", "func_normal", "func_name", "func_composition",
                   "func", "args", "limit_sub", "set_notation_sub", "set_notation_sub_expr",
                   "matrix_row", "matrix", "func_arg", "func_arg_noparens",
                   "subexpr", "supexpr", "subeq", "supeq", "vector", "piecewise_func",
                   "piecewise", "matrix_piecewise_func", "matrix_piecewise",
                   "calculation_add", "calculation_sub", "calculation_mul",
                   "calculation_div", "calculation", "matrix_relation" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    EWS=6
    WS=7
    THINSPACE=8
    MEDSPACE=9
    THICKSPACE=10
    QUAD=11
    QQUAD=12
    NEGTHINSPACE=13
    NEGMEDSPACE=14
    NEGTHICKSPACE=15
    CMD_LEFT=16
    CMD_RIGHT=17
    IGNORE=18
    ADD=19
    SUB=20
    MUL=21
    DIV=22
    SET_ADD=23
    SET_SUB=24
    SET_INTERSECT=25
    L_PAREN=26
    R_PAREN=27
    L_BRACE=28
    R_BRACE=29
    L_BRACE_LITERAL=30
    R_BRACE_LITERAL=31
    L_BRACKET=32
    R_BRACKET=33
    BAR=34
    HLINE=35
    OVERLINE=36
    SMASH_BIG=37
    R_BAR=38
    L_BAR=39
    L_ANGLE=40
    R_ANGLE=41
    FUNC_LIM=42
    LIM_APPROACH_SYM=43
    FUNC_INT=44
    FUNC_IINT=45
    FUNC_OINT=46
    FUNC_SUM=47
    FUNC_PROD=48
    FUNC_EXP=49
    FUNC_LOG=50
    FUNC_LG=51
    FUNC_LN=52
    FUNC_SIN=53
    FUNC_COS=54
    FUNC_TAN=55
    FUNC_CSC=56
    FUNC_SEC=57
    FUNC_COT=58
    FUNC_ARCSIN=59
    FUNC_ARCCOS=60
    FUNC_ARCTAN=61
    FUNC_ARCCSC=62
    FUNC_ARCSEC=63
    FUNC_ARCCOT=64
    FUNC_SINH=65
    FUNC_SECH=66
    FUNC_COSH=67
    FUNC_CSCH=68
    FUNC_TANH=69
    FUNC_COTH=70
    FUNC_ARCSINH=71
    FUNC_ARCSECH=72
    FUNC_ARCCOSH=73
    FUNC_ARCCSCH=74
    FUNC_ARCTANH=75
    FUNC_ARCCOTH=76
    FUNC_MATRIX_START=77
    FUNC_MATRIX_END=78
    FUNC_MATRIX_DETERMINENT_START=79
    FUNC_MATRIX_DETERMINENT_END=80
    FUNC_AL_MATRIX_PIECEWISE_START=81
    FUNC_AL_MATRIX_PIECEWISE_END=82
    FUNC_AR_MATRIX_PIECEWISE_START=83
    FUNC_AR_MATRIX_PIECEWISE_END=84
    FUNC_PIECEWISE_START=85
    FUNC_ARRAY_END=86
    FUNC_CALCULATION_START=87
    L_FLOOR=88
    R_FLOOR=89
    L_CEIL=90
    R_CEIL=91
    FUNC_SQRT=92
    FUNC_ABS=93
    FUNC_RE=94
    FUNC_IM=95
    FUNC_ARG=96
    CMD_TIMES=97
    CMD_CDOT=98
    CMD_DIV=99
    CMD_FRAC=100
    CMD_BINOM=101
    CMD_DBINOM=102
    CMD_TBINOM=103
    CMD_MATHIT=104
    CMD_ANGLE=105
    CMD_CIRCLE=106
    UNDERSCORE=107
    CARET=108
    COLON=109
    SEMI_COLON=110
    AMP=111
    DIFFERENTIAL=112
    MULTI_DIFFERENTIAL=113
    LETTER=114
    DIGIT=115
    EQUAL=116
    NEQ=117
    LT=118
    LTE=119
    LTE_Q=120
    LTE_S=121
    GT=122
    GTE=123
    EQUIV=124
    OTHERWISE=125
    GTE_Q=126
    GTE_S=127
    BANG=128
    SINGLE_QUOTES=129
    SYMBOL=130

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Left_parenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_left_parentheses




    def left_parentheses(self):

        localctx = LaTeXParser.Left_parenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_left_parentheses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4630511616) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_parenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_right_parentheses




    def right_parentheses(self):

        localctx = LaTeXParser.Right_parenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_right_parentheses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 146
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 9261023232) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def struct_relation(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_relationContext,0)


        def equation_list(self):
            return self.getTypedRuleContext(LaTeXParser.Equation_listContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_math




    def math(self):

        localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_math)
        try:
            self.state = 151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.relation(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 149
                self.struct_relation(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 150
                self.equation_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def LTE(self):
            return self.getToken(LaTeXParser.LTE, 0)

        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def GTE(self):
            return self.getToken(LaTeXParser.GTE, 0)

        def NEQ(self):
            return self.getToken(LaTeXParser.NEQ, 0)

        def EQUIV(self):
            return self.getToken(LaTeXParser.EQUIV, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_relation



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 156
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 157
                    _la = self._input.LA(1)
                    if not((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 463) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 158
                    self.relation(3)
                self.state = 163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EquationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def LTE(self):
            return self.getToken(LaTeXParser.LTE, 0)

        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def GTE(self):
            return self.getToken(LaTeXParser.GTE, 0)

        def NEQ(self):
            return self.getToken(LaTeXParser.NEQ, 0)

        def EQUIV(self):
            return self.getToken(LaTeXParser.EQUIV, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_equation




    def equation(self):

        localctx = LaTeXParser.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self.relation(0)
            self.state = 165
            _la = self._input.LA(1)
            if not((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & 463) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 166
            self.relation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equation_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.EquationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.EquationContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.SEMI_COLON)
            else:
                return self.getToken(LaTeXParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_equation_list




    def equation_list(self):

        localctx = LaTeXParser.Equation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_equation_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self.equation()
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==110:
                self.state = 173
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [110]:
                    self.state = 169
                    self.match(LaTeXParser.SEMI_COLON)
                    self.state = 170
                    self.equation()
                    pass
                elif token in [1]:
                    self.state = 171
                    self.match(LaTeXParser.T__0)
                    self.state = 172
                    self.equation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_expr(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_exprContext,0)


        def struct_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Struct_relationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Struct_relationContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_struct_relation



    def struct_relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Struct_relationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_struct_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self.struct_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Struct_relationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_relation)
                    self.state = 181
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")

                    self.state = 182
                    self.match(LaTeXParser.EQUAL)
                    self.state = 183
                    self.struct_relation(3)
                self.state = 188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Struct_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def struct_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Struct_exprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Struct_exprContext,i)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def SET_ADD(self):
            return self.getToken(LaTeXParser.SET_ADD, 0)

        def SET_SUB(self):
            return self.getToken(LaTeXParser.SET_SUB, 0)

        def SET_INTERSECT(self):
            return self.getToken(LaTeXParser.SET_INTERSECT, 0)

        def struct_value(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_valueContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_struct_expr



    def struct_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Struct_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_struct_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 190
                self.match(LaTeXParser.L_PAREN)
                self.state = 191
                self.struct_expr(0)
                self.state = 192
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 193
                self.struct_expr(0)
                self.state = 194
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 2:
                self.state = 196
                self.struct_value()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Struct_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_expr)
                    self.state = 199
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 200
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 201
                    self.struct_expr(4)
                self.state = 206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Struct_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ValueContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ValueContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_struct_form




    def struct_form(self):

        localctx = LaTeXParser.Struct_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_struct_form)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self.value()
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 208
                self.match(LaTeXParser.T__1)
                self.state = 209
                self.value()
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def left_parentheses(self):
            return self.getTypedRuleContext(LaTeXParser.Left_parenthesesContext,0)


        def right_parentheses(self):
            return self.getTypedRuleContext(LaTeXParser.Right_parenthesesContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ValueContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ValueContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_struct_value




    def struct_value(self):

        localctx = LaTeXParser.Struct_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_struct_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.left_parentheses()
            self.state = 217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 216
                self.value()


            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 219
                self.match(LaTeXParser.T__1)
                self.state = 220
                self.value()
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 226
            self.right_parentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_value(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_valueContext,0)


        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_value




    def value(self):

        localctx = LaTeXParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_value)
        try:
            self.state = 230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 228
                self.struct_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 229
                self.relation(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_oprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_interval_opr




    def interval_opr(self):

        localctx = LaTeXParser.Interval_oprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interval_opr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 13086228480) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interval_opr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Interval_oprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Interval_oprContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_interval




    def interval(self):

        localctx = LaTeXParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.interval_opr()
            self.state = 235
            self.expr()
            self.state = 236
            self.match(LaTeXParser.T__1)
            self.state = 237
            self.expr()
            self.state = 238
            self.interval_opr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def interval_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Interval_exprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Interval_exprContext,i)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def SET_ADD(self):
            return self.getToken(LaTeXParser.SET_ADD, 0)

        def SET_SUB(self):
            return self.getToken(LaTeXParser.SET_SUB, 0)

        def SET_INTERSECT(self):
            return self.getToken(LaTeXParser.SET_INTERSECT, 0)

        def struct_value(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_valueContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def interval(self):
            return self.getTypedRuleContext(LaTeXParser.IntervalContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_interval_expr



    def interval_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Interval_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_interval_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 241
                self.match(LaTeXParser.L_PAREN)
                self.state = 242
                self.interval_expr(0)
                self.state = 243
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 244
                    self.interval_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 245
                    self.struct_value()
                    pass

                elif la_ == 3:
                    self.state = 246
                    self.atom()
                    pass


                self.state = 249
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 2:
                self.state = 251
                self.interval()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Interval_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_interval_expr)
                    self.state = 254
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 255
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 259
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 256
                        self.interval_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 257
                        self.struct_value()
                        pass

                    elif la_ == 3:
                        self.state = 258
                        self.atom()
                        pass


                self.state = 265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_equality




    def equality(self):

        localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self.expr()
            self.state = 267
            self.match(LaTeXParser.EQUAL)
            self.state = 268
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_notation_sub_expr(self):
            return self.getTypedRuleContext(LaTeXParser.Set_notation_sub_exprContext,0)


        def interval_expr(self):
            return self.getTypedRuleContext(LaTeXParser.Interval_exprContext,0)


        def additive(self):
            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_expr




    def expr(self):

        localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr)
        try:
            self.state = 273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 270
                self.set_notation_sub_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 271
                self.interval_expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 272
                self.additive(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(LaTeXParser.MpContext,0)


        def additive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_additive



    def additive(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_additive, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
                    self.state = 278
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 279
                    _la = self._input.LA(1)
                    if not(_la==19 or _la==20):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 280
                    self.additive(3)
                self.state = 285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)


        def mp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.MpContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.MpContext,i)


        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mp



    def mp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_mp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 294
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
                    self.state = 289
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 290
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==22 or (((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 4103) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 291
                    self.mp(3)
                self.state = 296
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)


        def mp_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)


        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mp_nofunc



    def mp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_mp_nofunc, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 305
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
                    self.state = 300
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 301
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==22 or (((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 4103) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 302
                    self.mp_nofunc(3)
                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_unary




    def unary(self):

        localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unary)
        self._la = 0 # Token type
        try:
            self.state = 315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 309
                self.unary()
                pass
            elif token in [26, 28, 30, 32, 34, 36, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 87, 88, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 112, 114, 115, 118, 130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 311
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 310
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 313
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)


        def postfix_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_unary_nofunc




    def unary_nofunc(self):

        localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unary_nofunc)
        self._la = 0 # Token type
        try:
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 318
                self.unary_nofunc()
                pass
            elif token in [26, 28, 30, 32, 34, 36, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 87, 88, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 112, 114, 115, 118, 130]:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.postfix()
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 320
                        self.postfix_nofunc()
                    self.state = 325
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix




    def postfix(self):

        localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.exp(0)
            self.state = 332
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 329
                    self.postfix_op()
                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix_nofunc




    def postfix_nofunc(self):

        localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.exp_nofunc(0)
            self.state = 339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 336
                    self.postfix_op()
                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(LaTeXParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix_op




    def postfix_op(self):

        localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_postfix_op)
        try:
            self.state = 344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [128]:
                self.enterOuterAlt(localctx, 1)
                self.state = 342
                self.match(LaTeXParser.BANG)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 343
                self.eval_at()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)


        def eval_at_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at




    def eval_at(self):

        localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(LaTeXParser.BAR)
            self.state = 352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 347
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 348
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 349
                self.eval_at_sup()
                self.state = 350
                self.eval_at_sub()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at_sub




    def eval_at_sub(self):

        localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 355
            self.match(LaTeXParser.L_BRACE)
            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 356
                self.expr()
                pass

            elif la_ == 2:
                self.state = 357
                self.equality()
                pass


            self.state = 360
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_supContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at_sup




    def eval_at_sup(self):

        localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(LaTeXParser.CARET)
            self.state = 363
            self.match(LaTeXParser.L_BRACE)
            self.state = 366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 364
                self.expr()
                pass

            elif la_ == 2:
                self.state = 365
                self.equality()
                pass


            self.state = 368
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(LaTeXParser.CompContext,0)


        def exp(self):
            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)


        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_exp



    def exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 387
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
                    self.state = 373
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 374
                    self.match(LaTeXParser.CARET)
                    self.state = 380
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [34, 39, 40, 100, 101, 102, 103, 104, 105, 112, 114, 115, 130]:
                        self.state = 375
                        self.atom()
                        pass
                    elif token in [28]:
                        self.state = 376
                        self.match(LaTeXParser.L_BRACE)
                        self.state = 377
                        self.expr()
                        self.state = 378
                        self.match(LaTeXParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 383
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                    if la_ == 1:
                        self.state = 382
                        self.subexpr()


                self.state = 389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Exp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)


        def exp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)


        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_exp_nofunc



    def exp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
                    self.state = 393
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 394
                    self.match(LaTeXParser.CARET)
                    self.state = 400
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [34, 39, 40, 100, 101, 102, 103, 104, 105, 112, 114, 115, 130]:
                        self.state = 395
                        self.atom()
                        pass
                    elif token in [28]:
                        self.state = 396
                        self.match(LaTeXParser.L_BRACE)
                        self.state = 397
                        self.expr()
                        self.state = 398
                        self.match(LaTeXParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 403
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        self.state = 402
                        self.subexpr()


                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)


        def func(self):
            return self.getTypedRuleContext(LaTeXParser.FuncContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def floor(self):
            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)


        def ceil(self):
            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)


        def vector(self):
            return self.getTypedRuleContext(LaTeXParser.VectorContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_comp




    def comp(self):

        localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_comp)
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 411
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 412
                self.func()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 413
                self.atom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 414
                self.floor()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 415
                self.ceil()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 416
                self.vector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def floor(self):
            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)


        def ceil(self):
            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_comp_nofunc




    def comp_nofunc(self):

        localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_comp_nofunc)
        try:
            self.state = 424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self.floor()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 423
                self.ceil()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def L_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)

        def R_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_group




    def group(self):

        localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_group)
        try:
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 426
                self.match(LaTeXParser.L_PAREN)
                self.state = 427
                self.expr()
                self.state = 428
                self.match(LaTeXParser.R_PAREN)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.match(LaTeXParser.L_BRACKET)
                self.state = 431
                self.expr()
                self.state = 432
                self.match(LaTeXParser.R_BRACKET)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.match(LaTeXParser.L_BRACE)
                self.state = 435
                self.expr()
                self.state = 436
                self.match(LaTeXParser.R_BRACE)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 438
                self.match(LaTeXParser.L_BRACE_LITERAL)
                self.state = 439
                self.expr()
                self.state = 440
                self.match(LaTeXParser.R_BRACE_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.BAR)
            else:
                return self.getToken(LaTeXParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_abs_group




    def abs_group(self):

        localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_abs_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(LaTeXParser.BAR)
            self.state = 445
            self.expr()
            self.state = 446
            self.match(LaTeXParser.BAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.DIGIT)
            else:
                return self.getToken(LaTeXParser.DIGIT, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_number




    def number(self):

        localctx = LaTeXParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 448
                    self.match(LaTeXParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 453
                    self.match(LaTeXParser.T__0)
                    self.state = 454
                    self.match(LaTeXParser.DIGIT)
                    self.state = 455
                    self.match(LaTeXParser.DIGIT)
                    self.state = 456
                    self.match(LaTeXParser.DIGIT)
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 462
                self.match(LaTeXParser.T__2)
                self.state = 464
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 463
                        self.match(LaTeXParser.DIGIT)

                    else:
                        raise NoViableAltException(self)
                    self.state = 466
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def SINGLE_QUOTES(self):
            return self.getToken(LaTeXParser.SINGLE_QUOTES, 0)

        def number(self):
            return self.getTypedRuleContext(LaTeXParser.NumberContext,0)


        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def mathit(self):
            return self.getTypedRuleContext(LaTeXParser.MathitContext,0)


        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(LaTeXParser.BinomContext,0)


        def bra(self):
            return self.getTypedRuleContext(LaTeXParser.BraContext,0)


        def ket(self):
            return self.getTypedRuleContext(LaTeXParser.KetContext,0)


        def angle(self):
            return self.getTypedRuleContext(LaTeXParser.AngleContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_atom




    def atom(self):

        localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114, 130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                _la = self._input.LA(1)
                if not(_la==114 or _la==130):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 472
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        self.state = 471
                        self.subexpr()


                    self.state = 475
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                    if la_ == 1:
                        self.state = 474
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    pass

                elif la_ == 2:
                    self.state = 478
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        self.state = 477
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    self.state = 481
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                    if la_ == 1:
                        self.state = 480
                        self.subexpr()


                    pass


                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.number()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 3)
                self.state = 486
                self.match(LaTeXParser.DIFFERENTIAL)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 4)
                self.state = 487
                self.mathit()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 5)
                self.state = 488
                self.frac()
                pass
            elif token in [101, 102, 103]:
                self.enterOuterAlt(localctx, 6)
                self.state = 489
                self.binom()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 490
                self.bra()
                pass
            elif token in [34, 39]:
                self.enterOuterAlt(localctx, 8)
                self.state = 491
                self.ket()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 9)
                self.state = 492
                self.angle()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AngleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_ANGLE(self):
            return self.getToken(LaTeXParser.CMD_ANGLE, 0)

        def angle_points(self):
            return self.getTypedRuleContext(LaTeXParser.Angle_pointsContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_angle




    def angle(self):

        localctx = LaTeXParser.AngleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_angle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(LaTeXParser.CMD_ANGLE)
            self.state = 496
            self.angle_points()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_pointsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.LETTER)
            else:
                return self.getToken(LaTeXParser.LETTER, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_angle_points




    def angle_points(self):

        localctx = LaTeXParser.Angle_pointsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_angle_points)
        try:
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 499
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 498
                        self.match(LaTeXParser.LETTER)

                    else:
                        raise NoViableAltException(self)
                    self.state = 501
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                self.state = 504
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 503
                        self.match(LaTeXParser.LETTER)

                    else:
                        raise NoViableAltException(self)
                    self.state = 506
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                self.state = 509
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 508
                        self.match(LaTeXParser.LETTER)

                    else:
                        raise NoViableAltException(self)
                    self.state = 511
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 513
                        self.match(LaTeXParser.LETTER)

                    else:
                        raise NoViableAltException(self)
                    self.state = 516
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_ANGLE(self):
            return self.getToken(LaTeXParser.L_ANGLE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BAR(self):
            return self.getToken(LaTeXParser.R_BAR, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_bra




    def bra(self):

        localctx = LaTeXParser.BraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_bra)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(LaTeXParser.L_ANGLE)
            self.state = 521
            self.expr()
            self.state = 522
            _la = self._input.LA(1)
            if not(_la==34 or _la==38):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_ANGLE(self):
            return self.getToken(LaTeXParser.R_ANGLE, 0)

        def L_BAR(self):
            return self.getToken(LaTeXParser.L_BAR, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_ket




    def ket(self):

        localctx = LaTeXParser.KetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            _la = self._input.LA(1)
            if not(_la==34 or _la==39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 525
            self.expr()
            self.state = 526
            self.match(LaTeXParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATHIT(self):
            return self.getToken(LaTeXParser.CMD_MATHIT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def mathit_text(self):
            return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit




    def mathit(self):

        localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_mathit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(LaTeXParser.CMD_MATHIT)
            self.state = 529
            self.match(LaTeXParser.L_BRACE)
            self.state = 530
            self.mathit_text()
            self.state = 531
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mathit_textContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.LETTER)
            else:
                return self.getToken(LaTeXParser.LETTER, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit_text




    def mathit_text(self):

        localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_mathit_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==114:
                self.state = 533
                self.match(LaTeXParser.LETTER)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FracContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upperd = None # Token
            self.upper = None # ExprContext
            self.lowerd = None # Token
            self.lower = None # ExprContext

        def CMD_FRAC(self):
            return self.getToken(LaTeXParser.CMD_FRAC, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.DIGIT)
            else:
                return self.getToken(LaTeXParser.DIGIT, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_frac




    def frac(self):

        localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(LaTeXParser.CMD_FRAC)
            self.state = 545
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.state = 540
                localctx.upperd = self.match(LaTeXParser.DIGIT)
                pass
            elif token in [28]:
                self.state = 541
                self.match(LaTeXParser.L_BRACE)
                self.state = 542
                localctx.upper = self.expr()
                self.state = 543
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.state = 547
                localctx.lowerd = self.match(LaTeXParser.DIGIT)
                pass
            elif token in [28]:
                self.state = 548
                self.match(LaTeXParser.L_BRACE)
                self.state = 549
                localctx.lower = self.expr()
                self.state = 550
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # ExprContext
            self.k = None # ExprContext

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def CMD_BINOM(self):
            return self.getToken(LaTeXParser.CMD_BINOM, 0)

        def CMD_DBINOM(self):
            return self.getToken(LaTeXParser.CMD_DBINOM, 0)

        def CMD_TBINOM(self):
            return self.getToken(LaTeXParser.CMD_TBINOM, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_binom




    def binom(self):

        localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_binom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            _la = self._input.LA(1)
            if not((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 7) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 555
            self.match(LaTeXParser.L_BRACE)
            self.state = 556
            localctx.n = self.expr()
            self.state = 557
            self.match(LaTeXParser.R_BRACE)
            self.state = 558
            self.match(LaTeXParser.L_BRACE)
            self.state = 559
            localctx.k = self.expr()
            self.state = 560
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # ExprContext

        def L_FLOOR(self):
            return self.getToken(LaTeXParser.L_FLOOR, 0)

        def R_FLOOR(self):
            return self.getToken(LaTeXParser.R_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_floor




    def floor(self):

        localctx = LaTeXParser.FloorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_floor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(LaTeXParser.L_FLOOR)
            self.state = 563
            localctx.val = self.expr()
            self.state = 564
            self.match(LaTeXParser.R_FLOOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CeilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # ExprContext

        def L_CEIL(self):
            return self.getToken(LaTeXParser.L_CEIL, 0)

        def R_CEIL(self):
            return self.getToken(LaTeXParser.R_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_ceil




    def ceil(self):

        localctx = LaTeXParser.CeilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_ceil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(LaTeXParser.L_CEIL)
            self.state = 567
            localctx.val = self.expr()
            self.state = 568
            self.match(LaTeXParser.R_CEIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_EXP(self):
            return self.getToken(LaTeXParser.FUNC_EXP, 0)

        def FUNC_LOG(self):
            return self.getToken(LaTeXParser.FUNC_LOG, 0)

        def FUNC_LG(self):
            return self.getToken(LaTeXParser.FUNC_LG, 0)

        def FUNC_LN(self):
            return self.getToken(LaTeXParser.FUNC_LN, 0)

        def FUNC_SIN(self):
            return self.getToken(LaTeXParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(LaTeXParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(LaTeXParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(LaTeXParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(LaTeXParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(LaTeXParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(LaTeXParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(LaTeXParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(LaTeXParser.FUNC_TANH, 0)

        def FUNC_SECH(self):
            return self.getToken(LaTeXParser.FUNC_SECH, 0)

        def FUNC_CSCH(self):
            return self.getToken(LaTeXParser.FUNC_CSCH, 0)

        def FUNC_COTH(self):
            return self.getToken(LaTeXParser.FUNC_COTH, 0)

        def FUNC_ARCSINH(self):
            return self.getToken(LaTeXParser.FUNC_ARCSINH, 0)

        def FUNC_ARCCOSH(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOSH, 0)

        def FUNC_ARCTANH(self):
            return self.getToken(LaTeXParser.FUNC_ARCTANH, 0)

        def FUNC_ARCSECH(self):
            return self.getToken(LaTeXParser.FUNC_ARCSECH, 0)

        def FUNC_ARCCSCH(self):
            return self.getToken(LaTeXParser.FUNC_ARCCSCH, 0)

        def FUNC_ARCCOTH(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOTH, 0)

        def FUNC_ABS(self):
            return self.getToken(LaTeXParser.FUNC_ABS, 0)

        def FUNC_RE(self):
            return self.getToken(LaTeXParser.FUNC_RE, 0)

        def FUNC_IM(self):
            return self.getToken(LaTeXParser.FUNC_IM, 0)

        def FUNC_ARG(self):
            return self.getToken(LaTeXParser.FUNC_ARG, 0)

        def OVERLINE(self):
            return self.getToken(LaTeXParser.OVERLINE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_normal




    def func_normal(self):

        localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_func_normal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            _la = self._input.LA(1)
            if not((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & 2161730020161085441) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_name




    def func_name(self):

        localctx = LaTeXParser.Func_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_func_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            _la = self._input.LA(1)
            if not(_la==114 or _la==130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_compositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Func_nameContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Func_nameContext,i)


        def CMD_CIRCLE(self):
            return self.getToken(LaTeXParser.CMD_CIRCLE, 0)

        def func_composition(self):
            return self.getTypedRuleContext(LaTeXParser.Func_compositionContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_composition




    def func_composition(self):

        localctx = LaTeXParser.Func_compositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_func_composition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.func_name()
            self.state = 575
            self.match(LaTeXParser.CMD_CIRCLE)
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 576
                self.func_name()
                pass

            elif la_ == 2:
                self.state = 577
                self.func_composition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None # ExprContext
            self.base = None # ExprContext

        def func_normal(self):
            return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)


        def L_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_PAREN)
            else:
                return self.getToken(LaTeXParser.L_PAREN, i)

        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)


        def R_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_PAREN)
            else:
                return self.getToken(LaTeXParser.R_PAREN, i)

        def func_arg_noparens(self):
            return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)


        def args(self):
            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)


        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def SINGLE_QUOTES(self):
            return self.getToken(LaTeXParser.SINGLE_QUOTES, 0)

        def func_composition(self):
            return self.getTypedRuleContext(LaTeXParser.Func_compositionContext,0)


        def FUNC_INT(self):
            return self.getToken(LaTeXParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext,0)


        def additive(self):
            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)


        def FUNC_IINT(self):
            return self.getToken(LaTeXParser.FUNC_IINT, 0)

        def MULTI_DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.MULTI_DIFFERENTIAL, 0)

        def FUNC_OINT(self):
            return self.getToken(LaTeXParser.FUNC_OINT, 0)

        def FUNC_SQRT(self):
            return self.getToken(LaTeXParser.FUNC_SQRT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def FUNC_SUM(self):
            return self.getToken(LaTeXParser.FUNC_SUM, 0)

        def mp(self):
            return self.getTypedRuleContext(LaTeXParser.MpContext,0)


        def subeq(self):
            return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)


        def FUNC_PROD(self):
            return self.getToken(LaTeXParser.FUNC_PROD, 0)

        def FUNC_LIM(self):
            return self.getToken(LaTeXParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)


        def FUNC_MATRIX_START(self):
            return self.getToken(LaTeXParser.FUNC_MATRIX_START, 0)

        def matrix(self):
            return self.getTypedRuleContext(LaTeXParser.MatrixContext,0)


        def FUNC_MATRIX_END(self):
            return self.getToken(LaTeXParser.FUNC_MATRIX_END, 0)

        def FUNC_MATRIX_DETERMINENT_START(self):
            return self.getToken(LaTeXParser.FUNC_MATRIX_DETERMINENT_START, 0)

        def FUNC_MATRIX_DETERMINENT_END(self):
            return self.getToken(LaTeXParser.FUNC_MATRIX_DETERMINENT_END, 0)

        def FUNC_AL_MATRIX_PIECEWISE_START(self):
            return self.getToken(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_START, 0)

        def matrix_piecewise(self):
            return self.getTypedRuleContext(LaTeXParser.Matrix_piecewiseContext,0)


        def FUNC_AL_MATRIX_PIECEWISE_END(self):
            return self.getToken(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_END, 0)

        def FUNC_AR_MATRIX_PIECEWISE_START(self):
            return self.getToken(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_START, 0)

        def FUNC_AR_MATRIX_PIECEWISE_END(self):
            return self.getToken(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_END, 0)

        def FUNC_PIECEWISE_START(self):
            return self.getToken(LaTeXParser.FUNC_PIECEWISE_START, 0)

        def piecewise(self):
            return self.getTypedRuleContext(LaTeXParser.PiecewiseContext,0)


        def FUNC_ARRAY_END(self):
            return self.getToken(LaTeXParser.FUNC_ARRAY_END, 0)

        def FUNC_CALCULATION_START(self):
            return self.getToken(LaTeXParser.FUNC_CALCULATION_START, 0)

        def calculation(self):
            return self.getTypedRuleContext(LaTeXParser.CalculationContext,0)


        def matrix_relation(self):
            return self.getTypedRuleContext(LaTeXParser.Matrix_relationContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func




    def func(self):

        localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 580
                self.func_normal()
                self.state = 593
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==107:
                        self.state = 581
                        self.subexpr()


                    self.state = 585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==108:
                        self.state = 584
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==108:
                        self.state = 587
                        self.supexpr()


                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==107:
                        self.state = 590
                        self.subexpr()


                    pass


                self.state = 600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 595
                    self.match(LaTeXParser.L_PAREN)
                    self.state = 596
                    self.func_arg()
                    self.state = 597
                    self.match(LaTeXParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 599
                    self.func_arg_noparens()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                _la = self._input.LA(1)
                if not(_la==114 or _la==130):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==107:
                        self.state = 603
                        self.subexpr()


                    self.state = 607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==129:
                        self.state = 606
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    pass

                elif la_ == 2:
                    self.state = 610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==129:
                        self.state = 609
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    self.state = 613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==107:
                        self.state = 612
                        self.subexpr()


                    pass


                self.state = 617
                self.match(LaTeXParser.L_PAREN)
                self.state = 618
                self.args()
                self.state = 619
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self.match(LaTeXParser.L_PAREN)
                self.state = 622
                self.func_composition()
                self.state = 623
                self.match(LaTeXParser.R_PAREN)
                self.state = 624
                self.match(LaTeXParser.L_PAREN)
                self.state = 625
                self.args()
                self.state = 626
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                self.match(LaTeXParser.FUNC_INT)
                self.state = 635
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [107]:
                    self.state = 629
                    self.subexpr()
                    self.state = 630
                    self.supexpr()
                    pass
                elif token in [108]:
                    self.state = 632
                    self.supexpr()
                    self.state = 633
                    self.subexpr()
                    pass
                elif token in [19, 20, 26, 28, 30, 32, 34, 36, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 87, 88, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 112, 114, 115, 118, 130]:
                    pass
                else:
                    pass
                self.state = 643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        self.state = 637
                        self.additive(0)


                    self.state = 640
                    self.match(LaTeXParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 641
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 642
                    self.additive(0)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 645
                self.match(LaTeXParser.FUNC_IINT)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 646
                    self.subexpr()


                self.state = 655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & 6341068275315812995) != 0 or (((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 140778835689137) != 0:
                        self.state = 649
                        self.additive(0)


                    self.state = 652
                    self.match(LaTeXParser.MULTI_DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 653
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 654
                    self.additive(0)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 657
                self.match(LaTeXParser.FUNC_OINT)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 658
                    self.subexpr()


                self.state = 667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 662
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                    if la_ == 1:
                        self.state = 661
                        self.additive(0)


                    self.state = 664
                    self.match(LaTeXParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 665
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 666
                    self.additive(0)
                    pass


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 669
                self.match(LaTeXParser.FUNC_SQRT)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 670
                    self.match(LaTeXParser.L_BRACKET)
                    self.state = 671
                    localctx.root = self.expr()
                    self.state = 672
                    self.match(LaTeXParser.R_BRACKET)


                self.state = 676
                self.match(LaTeXParser.L_BRACE)
                self.state = 677
                localctx.base = self.expr()
                self.state = 678
                self.match(LaTeXParser.R_BRACE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 680
                self.match(LaTeXParser.FUNC_SUM)
                self.state = 693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 681
                    self.subeq()
                    self.state = 682
                    self.supexpr()
                    pass

                elif la_ == 2:
                    self.state = 684
                    self.subexpr()
                    self.state = 685
                    self.supexpr()
                    pass

                elif la_ == 3:
                    self.state = 687
                    self.supexpr()
                    self.state = 688
                    self.subeq()
                    pass

                elif la_ == 4:
                    self.state = 690
                    self.supexpr()
                    self.state = 691
                    self.subexpr()
                    pass


                self.state = 695
                self.mp(0)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 697
                self.match(LaTeXParser.FUNC_PROD)
                self.state = 704
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [107]:
                    self.state = 698
                    self.subeq()
                    self.state = 699
                    self.supexpr()
                    pass
                elif token in [108]:
                    self.state = 701
                    self.supexpr()
                    self.state = 702
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 706
                self.mp(0)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 708
                self.match(LaTeXParser.FUNC_LIM)
                self.state = 709
                self.limit_sub()
                self.state = 710
                self.mp(0)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 712
                self.match(LaTeXParser.FUNC_MATRIX_START)
                self.state = 713
                self.matrix()
                self.state = 714
                self.match(LaTeXParser.FUNC_MATRIX_END)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 716
                self.match(LaTeXParser.FUNC_MATRIX_DETERMINENT_START)
                self.state = 717
                self.matrix()
                self.state = 718
                self.match(LaTeXParser.FUNC_MATRIX_DETERMINENT_END)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 720
                self.match(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_START)
                self.state = 721
                self.matrix_piecewise()
                self.state = 722
                self.match(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_END)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 724
                self.match(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_START)
                self.state = 725
                self.matrix_piecewise()
                self.state = 726
                self.match(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_END)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 728
                self.match(LaTeXParser.L_BRACE)
                self.state = 729
                self.match(LaTeXParser.FUNC_PIECEWISE_START)
                self.state = 730
                self.piecewise()
                self.state = 731
                self.match(LaTeXParser.FUNC_ARRAY_END)
                self.state = 732
                self.match(LaTeXParser.T__2)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 734
                self.match(LaTeXParser.FUNC_CALCULATION_START)
                self.state = 735
                self.calculation()
                self.state = 736
                self.match(LaTeXParser.FUNC_ARRAY_END)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 738
                self.match(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_START)
                self.state = 739
                self.matrix_relation()
                self.state = 740
                self.match(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_END)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 742
                self.match(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_START)
                self.state = 743
                self.matrix_relation()
                self.state = 744
                self.match(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def args(self):
            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_args




    def args(self):

        localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_args)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.expr()
                self.state = 749
                self.match(LaTeXParser.T__1)
                self.state = 750
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_limit_sub




    def limit_sub(self):

        localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_limit_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 756
            self.match(LaTeXParser.L_BRACE)
            self.state = 757
            _la = self._input.LA(1)
            if not(_la==114 or _la==130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 758
            self.match(LaTeXParser.LIM_APPROACH_SYM)
            self.state = 759
            self.expr()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 760
                self.match(LaTeXParser.CARET)
                self.state = 766
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [28]:
                    self.state = 761
                    self.match(LaTeXParser.L_BRACE)
                    self.state = 762
                    _la = self._input.LA(1)
                    if not(_la==19 or _la==20):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 763
                    self.match(LaTeXParser.R_BRACE)
                    pass
                elif token in [19]:
                    self.state = 764
                    self.match(LaTeXParser.ADD)
                    pass
                elif token in [20]:
                    self.state = 765
                    self.match(LaTeXParser.SUB)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 770
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_notation_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_set_notation_sub




    def set_notation_sub(self):

        localctx = LaTeXParser.Set_notation_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_set_notation_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(LaTeXParser.L_BRACE)
            self.state = 773
            _la = self._input.LA(1)
            if not(_la==114 or _la==130):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 774
            self.match(LaTeXParser.BAR)
            self.state = 775
            self.relation(0)
            self.state = 776
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_notation_sub_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def set_notation_sub_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Set_notation_sub_exprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Set_notation_sub_exprContext,i)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def SET_ADD(self):
            return self.getToken(LaTeXParser.SET_ADD, 0)

        def SET_SUB(self):
            return self.getToken(LaTeXParser.SET_SUB, 0)

        def SET_INTERSECT(self):
            return self.getToken(LaTeXParser.SET_INTERSECT, 0)

        def set_notation_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Set_notation_subContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_set_notation_sub_expr



    def set_notation_sub_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Set_notation_sub_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_set_notation_sub_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 779
                self.match(LaTeXParser.L_PAREN)
                self.state = 780
                self.set_notation_sub_expr(0)
                self.state = 781
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 782
                self.set_notation_sub_expr(0)
                self.state = 783
                self.match(LaTeXParser.R_PAREN)
                pass
            elif token in [28]:
                self.state = 785
                self.set_notation_sub()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 793
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Set_notation_sub_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_notation_sub_expr)
                    self.state = 788
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 789
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 790
                    self.set_notation_sub_expr(4)
                self.state = 795
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Matrix_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.AMP)
            else:
                return self.getToken(LaTeXParser.AMP, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix_row




    def matrix_row(self):

        localctx = LaTeXParser.Matrix_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_matrix_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.expr()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==111:
                self.state = 797
                self.match(LaTeXParser.AMP)
                self.state = 798
                self.expr()
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Matrix_rowContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix




    def matrix(self):

        localctx = LaTeXParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_matrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.matrix_row()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 805
                self.match(LaTeXParser.T__3)
                self.state = 806
                self.matrix_row()
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg




    def func_arg(self):

        localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_func_arg)
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.expr()
                self.state = 814
                self.match(LaTeXParser.T__1)
                self.state = 815
                self.func_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg_noparens




    def func_arg_noparens(self):

        localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_func_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subexpr




    def subexpr(self):

        localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 39, 40, 100, 101, 102, 103, 104, 105, 112, 114, 115, 130]:
                self.state = 822
                self.atom()
                pass
            elif token in [28]:
                self.state = 823
                self.match(LaTeXParser.L_BRACE)
                self.state = 824
                self.expr()
                self.state = 825
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supexpr




    def supexpr(self):

        localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(LaTeXParser.CARET)
            self.state = 835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 39, 40, 100, 101, 102, 103, 104, 105, 112, 114, 115, 130]:
                self.state = 830
                self.atom()
                pass
            elif token in [28]:
                self.state = 831
                self.match(LaTeXParser.L_BRACE)
                self.state = 832
                self.expr()
                self.state = 833
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subeq




    def subeq(self):

        localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 838
            self.match(LaTeXParser.L_BRACE)
            self.state = 839
            self.equality()
            self.state = 840
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supeq




    def supeq(self):

        localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_supeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 843
            self.match(LaTeXParser.L_BRACE)
            self.state = 844
            self.equality()
            self.state = 845
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)


        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_vector




    def vector(self):

        localctx = LaTeXParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(LaTeXParser.LT)
            self.state = 848
            self.func_arg()
            self.state = 849
            self.match(LaTeXParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Piecewise_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def AMP(self):
            return self.getToken(LaTeXParser.AMP, 0)

        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_piecewise_func




    def piecewise_func(self):

        localctx = LaTeXParser.Piecewise_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_piecewise_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.expr()
            self.state = 852
            self.match(LaTeXParser.AMP)
            self.state = 853
            self.match(LaTeXParser.T__4)
            self.state = 854
            self.relation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PiecewiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def piecewise_func(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Piecewise_funcContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Piecewise_funcContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_piecewise




    def piecewise(self):

        localctx = LaTeXParser.PiecewiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_piecewise)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.piecewise_func()
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 857
                self.match(LaTeXParser.T__3)
                self.state = 858
                self.piecewise_func()
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_piecewise_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def SEMI_COLON(self):
            return self.getToken(LaTeXParser.SEMI_COLON, 0)

        def AMP(self):
            return self.getToken(LaTeXParser.AMP, 0)

        def OTHERWISE(self):
            return self.getToken(LaTeXParser.OTHERWISE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix_piecewise_func




    def matrix_piecewise_func(self):

        localctx = LaTeXParser.Matrix_piecewise_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_matrix_piecewise_func)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.expr()
                self.state = 866
                _la = self._input.LA(1)
                if not(_la==5 or _la==110 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 867
                self.relation(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 869
                self.expr()
                self.state = 870
                self.match(LaTeXParser.OTHERWISE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_piecewiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matrix_piecewise_func(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Matrix_piecewise_funcContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Matrix_piecewise_funcContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix_piecewise




    def matrix_piecewise(self):

        localctx = LaTeXParser.Matrix_piecewiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_matrix_piecewise)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.matrix_piecewise_func()
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 875
                self.match(LaTeXParser.T__3)
                self.state = 876
                self.matrix_piecewise_func()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calculation_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.NumberContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.NumberContext,i)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def HLINE(self):
            return self.getToken(LaTeXParser.HLINE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation_add




    def calculation_add(self):

        localctx = LaTeXParser.Calculation_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_calculation_add)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.number()
            self.state = 883
            self.match(LaTeXParser.T__3)
            self.state = 884
            self.match(LaTeXParser.ADD)
            self.state = 885
            self.number()
            self.state = 886
            self.match(LaTeXParser.T__3)
            self.state = 887
            self.match(LaTeXParser.HLINE)
            self.state = 888
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calculation_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.NumberContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.NumberContext,i)


        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def HLINE(self):
            return self.getToken(LaTeXParser.HLINE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation_sub




    def calculation_sub(self):

        localctx = LaTeXParser.Calculation_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_calculation_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.number()
            self.state = 891
            self.match(LaTeXParser.T__3)
            self.state = 892
            self.match(LaTeXParser.SUB)
            self.state = 893
            self.number()
            self.state = 894
            self.match(LaTeXParser.T__3)
            self.state = 895
            self.match(LaTeXParser.HLINE)
            self.state = 896
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calculation_mulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.NumberContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.NumberContext,i)


        def HLINE(self):
            return self.getToken(LaTeXParser.HLINE, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation_mul




    def calculation_mul(self):

        localctx = LaTeXParser.Calculation_mulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_calculation_mul)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.number()
            self.state = 899
            self.match(LaTeXParser.T__3)
            self.state = 900
            _la = self._input.LA(1)
            if not(_la==21 or _la==97):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 901
            self.number()
            self.state = 902
            self.match(LaTeXParser.T__3)
            self.state = 903
            self.match(LaTeXParser.HLINE)
            self.state = 904
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calculation_divContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.NumberContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.NumberContext,i)


        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def OVERLINE(self):
            return self.getToken(LaTeXParser.OVERLINE, 0)

        def SMASH_BIG(self):
            return self.getToken(LaTeXParser.SMASH_BIG, 0)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation_div




    def calculation_div(self):

        localctx = LaTeXParser.Calculation_divContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_calculation_div)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.number()
            self.state = 907
            self.match(LaTeXParser.T__3)
            self.state = 908
            self.number()
            self.state = 909
            self.match(LaTeXParser.L_BRACE)
            self.state = 910
            self.match(LaTeXParser.OVERLINE)
            self.state = 911
            self.match(LaTeXParser.L_BRACE)
            self.state = 912
            self.match(LaTeXParser.SMASH_BIG)
            self.state = 913
            self.number()
            self.state = 914
            self.match(LaTeXParser.R_BRACE)
            self.state = 915
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalculationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calculation_add(self):
            return self.getTypedRuleContext(LaTeXParser.Calculation_addContext,0)


        def calculation_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Calculation_subContext,0)


        def calculation_mul(self):
            return self.getTypedRuleContext(LaTeXParser.Calculation_mulContext,0)


        def calculation_div(self):
            return self.getTypedRuleContext(LaTeXParser.Calculation_divContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation




    def calculation(self):

        localctx = LaTeXParser.CalculationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_calculation)
        try:
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.calculation_add()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.calculation_sub()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 919
                self.calculation_mul()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 920
                self.calculation_div()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix_relation




    def matrix_relation(self):

        localctx = LaTeXParser.Matrix_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_matrix_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.relation(0)
            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 924
                self.match(LaTeXParser.T__3)
                self.state = 925
                self.relation(0)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[3] = self.relation_sempred
        self._predicates[6] = self.struct_relation_sempred
        self._predicates[7] = self.struct_expr_sempred
        self._predicates[13] = self.interval_expr_sempred
        self._predicates[16] = self.additive_sempred
        self._predicates[17] = self.mp_sempred
        self._predicates[18] = self.mp_nofunc_sempred
        self._predicates[27] = self.exp_sempred
        self._predicates[28] = self.exp_nofunc_sempred
        self._predicates[52] = self.set_notation_sub_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)


    def struct_relation_sempred(self, localctx:Struct_relationContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)


    def struct_expr_sempred(self, localctx:Struct_exprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 3)


    def interval_expr_sempred(self, localctx:Interval_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 3)


    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)


    def mp_sempred(self, localctx:MpContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)


    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)


    def exp_sempred(self, localctx:ExpContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)


    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)


    def set_notation_sub_expr_sempred(self, localctx:Set_notation_sub_exprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 3)





