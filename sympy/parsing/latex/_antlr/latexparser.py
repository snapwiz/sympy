# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
#
# Generated from ../LaTeX.g4, derived from latex2sympy
#     latex2sympy is licensed under the MIT license
#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
#
# Generated with antlr4
#    antlr4 is licensed under the BSD-3-Clause License
#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,132,913,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,1,0,1,0,1,1,
        1,1,1,2,1,2,1,2,3,2,150,8,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,158,8,3,
        10,3,12,3,161,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,172,8,
        5,10,5,12,5,175,9,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,183,8,6,10,6,12,
        6,186,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,196,8,7,1,7,1,7,1,
        7,5,7,201,8,7,10,7,12,7,204,9,7,1,8,1,8,1,8,5,8,209,8,8,10,8,12,
        8,212,9,8,1,9,1,9,3,9,216,8,9,1,9,1,9,5,9,220,8,9,10,9,12,9,223,
        9,9,1,9,1,9,1,10,1,10,3,10,229,8,10,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,246,8,13,1,13,
        1,13,1,13,3,13,251,8,13,1,13,1,13,1,13,1,13,1,13,3,13,258,8,13,5,
        13,260,8,13,10,13,12,13,263,9,13,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,3,15,272,8,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,280,8,16,10,
        16,12,16,283,9,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,291,8,17,10,
        17,12,17,294,9,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,302,8,18,10,
        18,12,18,305,9,18,1,19,1,19,1,19,4,19,310,8,19,11,19,12,19,311,3,
        19,314,8,19,1,20,1,20,1,20,1,20,5,20,320,8,20,10,20,12,20,323,9,
        20,3,20,325,8,20,1,21,1,21,5,21,329,8,21,10,21,12,21,332,9,21,1,
        22,1,22,5,22,336,8,22,10,22,12,22,339,9,22,1,23,1,23,3,23,343,8,
        23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,351,8,24,1,25,1,25,1,25,1,
        25,3,25,357,8,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,365,8,26,1,26,
        1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,379,
        8,27,1,27,3,27,382,8,27,5,27,384,8,27,10,27,12,27,387,9,27,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,399,8,28,1,28,
        3,28,402,8,28,5,28,404,8,28,10,28,12,28,407,9,28,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,3,29,416,8,29,1,30,1,30,1,30,1,30,1,30,3,30,
        423,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,3,31,441,8,31,1,32,1,32,1,32,1,32,1,33,
        1,33,3,33,449,8,33,1,33,3,33,452,8,33,1,33,3,33,455,8,33,1,33,3,
        33,458,8,33,3,33,460,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,470,8,33,1,34,1,34,1,34,1,35,4,35,476,8,35,11,35,12,35,477,
        1,35,4,35,481,8,35,11,35,12,35,482,1,35,4,35,486,8,35,11,35,12,35,
        487,1,35,4,35,491,8,35,11,35,12,35,492,3,35,495,8,35,1,36,1,36,1,
        36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,5,39,511,
        8,39,10,39,12,39,514,9,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,522,
        8,40,1,40,1,40,1,40,1,40,1,40,3,40,529,8,40,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,
        1,44,1,45,1,45,1,46,1,46,1,46,1,46,3,46,555,8,46,1,47,1,47,3,47,
        559,8,47,1,47,3,47,562,8,47,1,47,3,47,565,8,47,1,47,3,47,568,8,47,
        3,47,570,8,47,1,47,1,47,1,47,1,47,1,47,3,47,577,8,47,1,47,1,47,3,
        47,581,8,47,1,47,3,47,584,8,47,1,47,3,47,587,8,47,1,47,3,47,590,
        8,47,3,47,592,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,612,8,47,1,47,
        3,47,615,8,47,1,47,1,47,1,47,3,47,620,8,47,1,47,1,47,3,47,624,8,
        47,1,47,3,47,627,8,47,1,47,1,47,1,47,3,47,632,8,47,1,47,1,47,3,47,
        636,8,47,1,47,3,47,639,8,47,1,47,1,47,1,47,3,47,644,8,47,1,47,1,
        47,1,47,1,47,1,47,3,47,651,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,3,47,675,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,3,47,686,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,3,47,728,8,47,1,48,1,48,1,48,1,48,1,
        48,3,48,735,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
        49,1,49,3,49,748,8,49,3,49,750,8,49,1,49,1,49,1,50,1,50,1,50,1,50,
        1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,768,8,51,
        1,51,1,51,1,51,5,51,773,8,51,10,51,12,51,776,9,51,1,52,1,52,1,52,
        5,52,781,8,52,10,52,12,52,784,9,52,1,53,1,53,1,53,5,53,789,8,53,
        10,53,12,53,792,9,53,1,54,1,54,1,54,1,54,1,54,3,54,799,8,54,1,55,
        1,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,809,8,56,1,57,1,57,1,57,
        1,57,1,57,1,57,3,57,817,8,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,
        1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,
        1,62,1,62,5,62,841,8,62,10,62,12,62,844,9,62,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,3,63,854,8,63,1,64,1,64,1,64,5,64,859,8,64,10,
        64,12,64,862,9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,
        67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        69,1,69,1,69,1,69,3,69,903,8,69,1,70,1,70,1,70,5,70,908,8,70,10,
        70,12,70,911,9,70,1,70,0,10,6,12,14,26,32,34,36,54,56,102,71,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,0,14,3,0,26,26,28,28,32,32,3,0,27,27,
        29,29,33,33,2,0,118,121,124,126,1,0,23,25,2,0,26,27,32,33,1,0,19,
        20,3,0,21,22,98,100,110,110,2,0,115,115,132,132,2,0,34,34,38,38,
        2,0,34,34,39,39,1,0,102,104,3,0,36,36,49,76,93,96,2,0,5,5,111,112,
        2,0,21,21,98,98,982,0,142,1,0,0,0,2,144,1,0,0,0,4,149,1,0,0,0,6,
        151,1,0,0,0,8,162,1,0,0,0,10,166,1,0,0,0,12,176,1,0,0,0,14,195,1,
        0,0,0,16,205,1,0,0,0,18,213,1,0,0,0,20,228,1,0,0,0,22,230,1,0,0,
        0,24,232,1,0,0,0,26,250,1,0,0,0,28,264,1,0,0,0,30,271,1,0,0,0,32,
        273,1,0,0,0,34,284,1,0,0,0,36,295,1,0,0,0,38,313,1,0,0,0,40,324,
        1,0,0,0,42,326,1,0,0,0,44,333,1,0,0,0,46,342,1,0,0,0,48,344,1,0,
        0,0,50,352,1,0,0,0,52,360,1,0,0,0,54,368,1,0,0,0,56,388,1,0,0,0,
        58,415,1,0,0,0,60,422,1,0,0,0,62,440,1,0,0,0,64,442,1,0,0,0,66,469,
        1,0,0,0,68,471,1,0,0,0,70,494,1,0,0,0,72,496,1,0,0,0,74,500,1,0,
        0,0,76,504,1,0,0,0,78,512,1,0,0,0,80,515,1,0,0,0,82,530,1,0,0,0,
        84,538,1,0,0,0,86,542,1,0,0,0,88,546,1,0,0,0,90,548,1,0,0,0,92,550,
        1,0,0,0,94,727,1,0,0,0,96,734,1,0,0,0,98,736,1,0,0,0,100,753,1,0,
        0,0,102,767,1,0,0,0,104,777,1,0,0,0,106,785,1,0,0,0,108,798,1,0,
        0,0,110,800,1,0,0,0,112,802,1,0,0,0,114,810,1,0,0,0,116,818,1,0,
        0,0,118,823,1,0,0,0,120,828,1,0,0,0,122,832,1,0,0,0,124,837,1,0,
        0,0,126,853,1,0,0,0,128,855,1,0,0,0,130,863,1,0,0,0,132,871,1,0,
        0,0,134,879,1,0,0,0,136,887,1,0,0,0,138,902,1,0,0,0,140,904,1,0,
        0,0,142,143,7,0,0,0,143,1,1,0,0,0,144,145,7,1,0,0,145,3,1,0,0,0,
        146,150,3,6,3,0,147,150,3,12,6,0,148,150,3,10,5,0,149,146,1,0,0,
        0,149,147,1,0,0,0,149,148,1,0,0,0,150,5,1,0,0,0,151,152,6,3,-1,0,
        152,153,3,30,15,0,153,159,1,0,0,0,154,155,10,2,0,0,155,156,7,2,0,
        0,156,158,3,6,3,3,157,154,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,
        0,159,160,1,0,0,0,160,7,1,0,0,0,161,159,1,0,0,0,162,163,3,6,3,0,
        163,164,7,2,0,0,164,165,3,6,3,0,165,9,1,0,0,0,166,173,3,8,4,0,167,
        168,5,111,0,0,168,172,3,8,4,0,169,170,5,1,0,0,170,172,3,8,4,0,171,
        167,1,0,0,0,171,169,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,
        174,1,0,0,0,174,11,1,0,0,0,175,173,1,0,0,0,176,177,6,6,-1,0,177,
        178,3,14,7,0,178,184,1,0,0,0,179,180,10,2,0,0,180,181,5,118,0,0,
        181,183,3,12,6,3,182,179,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,
        184,185,1,0,0,0,185,13,1,0,0,0,186,184,1,0,0,0,187,188,6,7,-1,0,
        188,189,5,26,0,0,189,190,3,14,7,0,190,191,7,3,0,0,191,192,3,14,7,
        0,192,193,5,27,0,0,193,196,1,0,0,0,194,196,3,18,9,0,195,187,1,0,
        0,0,195,194,1,0,0,0,196,202,1,0,0,0,197,198,10,3,0,0,198,199,7,3,
        0,0,199,201,3,14,7,4,200,197,1,0,0,0,201,204,1,0,0,0,202,200,1,0,
        0,0,202,203,1,0,0,0,203,15,1,0,0,0,204,202,1,0,0,0,205,210,3,20,
        10,0,206,207,5,2,0,0,207,209,3,20,10,0,208,206,1,0,0,0,209,212,1,
        0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,17,1,0,0,0,212,210,1,0,
        0,0,213,215,3,0,0,0,214,216,3,20,10,0,215,214,1,0,0,0,215,216,1,
        0,0,0,216,221,1,0,0,0,217,218,5,2,0,0,218,220,3,20,10,0,219,217,
        1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,224,
        1,0,0,0,223,221,1,0,0,0,224,225,3,2,1,0,225,19,1,0,0,0,226,229,3,
        18,9,0,227,229,3,6,3,0,228,226,1,0,0,0,228,227,1,0,0,0,229,21,1,
        0,0,0,230,231,7,4,0,0,231,23,1,0,0,0,232,233,3,22,11,0,233,234,3,
        30,15,0,234,235,5,2,0,0,235,236,3,30,15,0,236,237,3,22,11,0,237,
        25,1,0,0,0,238,239,6,13,-1,0,239,240,5,26,0,0,240,241,3,26,13,0,
        241,245,7,3,0,0,242,246,3,26,13,0,243,246,3,18,9,0,244,246,3,66,
        33,0,245,242,1,0,0,0,245,243,1,0,0,0,245,244,1,0,0,0,246,247,1,0,
        0,0,247,248,5,27,0,0,248,251,1,0,0,0,249,251,3,24,12,0,250,238,1,
        0,0,0,250,249,1,0,0,0,251,261,1,0,0,0,252,253,10,3,0,0,253,257,7,
        3,0,0,254,258,3,26,13,0,255,258,3,18,9,0,256,258,3,66,33,0,257,254,
        1,0,0,0,257,255,1,0,0,0,257,256,1,0,0,0,258,260,1,0,0,0,259,252,
        1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,27,1,
        0,0,0,263,261,1,0,0,0,264,265,3,30,15,0,265,266,5,118,0,0,266,267,
        3,30,15,0,267,29,1,0,0,0,268,272,3,102,51,0,269,272,3,26,13,0,270,
        272,3,32,16,0,271,268,1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,
        31,1,0,0,0,273,274,6,16,-1,0,274,275,3,34,17,0,275,281,1,0,0,0,276,
        277,10,2,0,0,277,278,7,5,0,0,278,280,3,32,16,3,279,276,1,0,0,0,280,
        283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,33,1,0,0,0,283,281,
        1,0,0,0,284,285,6,17,-1,0,285,286,3,38,19,0,286,292,1,0,0,0,287,
        288,10,2,0,0,288,289,7,6,0,0,289,291,3,34,17,3,290,287,1,0,0,0,291,
        294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,35,1,0,0,0,294,292,
        1,0,0,0,295,296,6,18,-1,0,296,297,3,40,20,0,297,303,1,0,0,0,298,
        299,10,2,0,0,299,300,7,6,0,0,300,302,3,36,18,3,301,298,1,0,0,0,302,
        305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,37,1,0,0,0,305,303,
        1,0,0,0,306,307,7,5,0,0,307,314,3,38,19,0,308,310,3,42,21,0,309,
        308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,
        314,1,0,0,0,313,306,1,0,0,0,313,309,1,0,0,0,314,39,1,0,0,0,315,316,
        7,5,0,0,316,325,3,40,20,0,317,321,3,42,21,0,318,320,3,44,22,0,319,
        318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
        325,1,0,0,0,323,321,1,0,0,0,324,315,1,0,0,0,324,317,1,0,0,0,325,
        41,1,0,0,0,326,330,3,54,27,0,327,329,3,46,23,0,328,327,1,0,0,0,329,
        332,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,43,1,0,0,0,332,330,
        1,0,0,0,333,337,3,56,28,0,334,336,3,46,23,0,335,334,1,0,0,0,336,
        339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,45,1,0,0,0,339,337,
        1,0,0,0,340,343,5,130,0,0,341,343,3,48,24,0,342,340,1,0,0,0,342,
        341,1,0,0,0,343,47,1,0,0,0,344,350,5,34,0,0,345,351,3,52,26,0,346,
        351,3,50,25,0,347,348,3,52,26,0,348,349,3,50,25,0,349,351,1,0,0,
        0,350,345,1,0,0,0,350,346,1,0,0,0,350,347,1,0,0,0,351,49,1,0,0,0,
        352,353,5,108,0,0,353,356,5,28,0,0,354,357,3,30,15,0,355,357,3,28,
        14,0,356,354,1,0,0,0,356,355,1,0,0,0,357,358,1,0,0,0,358,359,5,29,
        0,0,359,51,1,0,0,0,360,361,5,109,0,0,361,364,5,28,0,0,362,365,3,
        30,15,0,363,365,3,28,14,0,364,362,1,0,0,0,364,363,1,0,0,0,365,366,
        1,0,0,0,366,367,5,29,0,0,367,53,1,0,0,0,368,369,6,27,-1,0,369,370,
        3,58,29,0,370,385,1,0,0,0,371,372,10,2,0,0,372,378,5,109,0,0,373,
        379,3,66,33,0,374,375,5,28,0,0,375,376,3,30,15,0,376,377,5,29,0,
        0,377,379,1,0,0,0,378,373,1,0,0,0,378,374,1,0,0,0,379,381,1,0,0,
        0,380,382,3,112,56,0,381,380,1,0,0,0,381,382,1,0,0,0,382,384,1,0,
        0,0,383,371,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,
        0,0,386,55,1,0,0,0,387,385,1,0,0,0,388,389,6,28,-1,0,389,390,3,60,
        30,0,390,405,1,0,0,0,391,392,10,2,0,0,392,398,5,109,0,0,393,399,
        3,66,33,0,394,395,5,28,0,0,395,396,3,30,15,0,396,397,5,29,0,0,397,
        399,1,0,0,0,398,393,1,0,0,0,398,394,1,0,0,0,399,401,1,0,0,0,400,
        402,3,112,56,0,401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,
        391,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,
        57,1,0,0,0,407,405,1,0,0,0,408,416,3,62,31,0,409,416,3,64,32,0,410,
        416,3,94,47,0,411,416,3,66,33,0,412,416,3,84,42,0,413,416,3,86,43,
        0,414,416,3,120,60,0,415,408,1,0,0,0,415,409,1,0,0,0,415,410,1,0,
        0,0,415,411,1,0,0,0,415,412,1,0,0,0,415,413,1,0,0,0,415,414,1,0,
        0,0,416,59,1,0,0,0,417,423,3,62,31,0,418,423,3,64,32,0,419,423,3,
        66,33,0,420,423,3,84,42,0,421,423,3,86,43,0,422,417,1,0,0,0,422,
        418,1,0,0,0,422,419,1,0,0,0,422,420,1,0,0,0,422,421,1,0,0,0,423,
        61,1,0,0,0,424,425,5,26,0,0,425,426,3,30,15,0,426,427,5,27,0,0,427,
        441,1,0,0,0,428,429,5,32,0,0,429,430,3,30,15,0,430,431,5,33,0,0,
        431,441,1,0,0,0,432,433,5,28,0,0,433,434,3,30,15,0,434,435,5,29,
        0,0,435,441,1,0,0,0,436,437,5,30,0,0,437,438,3,30,15,0,438,439,5,
        31,0,0,439,441,1,0,0,0,440,424,1,0,0,0,440,428,1,0,0,0,440,432,1,
        0,0,0,440,436,1,0,0,0,441,63,1,0,0,0,442,443,5,34,0,0,443,444,3,
        30,15,0,444,445,5,34,0,0,445,65,1,0,0,0,446,459,7,7,0,0,447,449,
        3,112,56,0,448,447,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,452,
        5,131,0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,460,1,0,0,0,453,455,
        5,131,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,458,
        3,112,56,0,457,456,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,448,
        1,0,0,0,459,454,1,0,0,0,460,470,1,0,0,0,461,470,5,116,0,0,462,470,
        5,113,0,0,463,470,3,76,38,0,464,470,3,80,40,0,465,470,3,82,41,0,
        466,470,3,72,36,0,467,470,3,74,37,0,468,470,3,68,34,0,469,446,1,
        0,0,0,469,461,1,0,0,0,469,462,1,0,0,0,469,463,1,0,0,0,469,464,1,
        0,0,0,469,465,1,0,0,0,469,466,1,0,0,0,469,467,1,0,0,0,469,468,1,
        0,0,0,470,67,1,0,0,0,471,472,5,106,0,0,472,473,3,70,35,0,473,69,
        1,0,0,0,474,476,5,115,0,0,475,474,1,0,0,0,476,477,1,0,0,0,477,475,
        1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,481,5,115,0,0,480,479,
        1,0,0,0,481,482,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,485,
        1,0,0,0,484,486,5,115,0,0,485,484,1,0,0,0,486,487,1,0,0,0,487,485,
        1,0,0,0,487,488,1,0,0,0,488,495,1,0,0,0,489,491,5,115,0,0,490,489,
        1,0,0,0,491,492,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,495,
        1,0,0,0,494,475,1,0,0,0,494,490,1,0,0,0,495,71,1,0,0,0,496,497,5,
        40,0,0,497,498,3,30,15,0,498,499,7,8,0,0,499,73,1,0,0,0,500,501,
        7,9,0,0,501,502,3,30,15,0,502,503,5,41,0,0,503,75,1,0,0,0,504,505,
        5,105,0,0,505,506,5,28,0,0,506,507,3,78,39,0,507,508,5,29,0,0,508,
        77,1,0,0,0,509,511,5,115,0,0,510,509,1,0,0,0,511,514,1,0,0,0,512,
        510,1,0,0,0,512,513,1,0,0,0,513,79,1,0,0,0,514,512,1,0,0,0,515,521,
        5,101,0,0,516,522,5,117,0,0,517,518,5,28,0,0,518,519,3,30,15,0,519,
        520,5,29,0,0,520,522,1,0,0,0,521,516,1,0,0,0,521,517,1,0,0,0,522,
        528,1,0,0,0,523,529,5,117,0,0,524,525,5,28,0,0,525,526,3,30,15,0,
        526,527,5,29,0,0,527,529,1,0,0,0,528,523,1,0,0,0,528,524,1,0,0,0,
        529,81,1,0,0,0,530,531,7,10,0,0,531,532,5,28,0,0,532,533,3,30,15,
        0,533,534,5,29,0,0,534,535,5,28,0,0,535,536,3,30,15,0,536,537,5,
        29,0,0,537,83,1,0,0,0,538,539,5,88,0,0,539,540,3,30,15,0,540,541,
        5,89,0,0,541,85,1,0,0,0,542,543,5,90,0,0,543,544,3,30,15,0,544,545,
        5,91,0,0,545,87,1,0,0,0,546,547,7,11,0,0,547,89,1,0,0,0,548,549,
        7,7,0,0,549,91,1,0,0,0,550,551,3,90,45,0,551,554,5,107,0,0,552,555,
        3,90,45,0,553,555,3,92,46,0,554,552,1,0,0,0,554,553,1,0,0,0,555,
        93,1,0,0,0,556,569,3,88,44,0,557,559,3,112,56,0,558,557,1,0,0,0,
        558,559,1,0,0,0,559,561,1,0,0,0,560,562,3,114,57,0,561,560,1,0,0,
        0,561,562,1,0,0,0,562,570,1,0,0,0,563,565,3,114,57,0,564,563,1,0,
        0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,568,3,112,56,0,567,566,1,
        0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,558,1,0,0,0,569,564,1,
        0,0,0,570,576,1,0,0,0,571,572,5,26,0,0,572,573,3,108,54,0,573,574,
        5,27,0,0,574,577,1,0,0,0,575,577,3,110,55,0,576,571,1,0,0,0,576,
        575,1,0,0,0,577,728,1,0,0,0,578,591,7,7,0,0,579,581,3,112,56,0,580,
        579,1,0,0,0,580,581,1,0,0,0,581,583,1,0,0,0,582,584,5,131,0,0,583,
        582,1,0,0,0,583,584,1,0,0,0,584,592,1,0,0,0,585,587,5,131,0,0,586,
        585,1,0,0,0,586,587,1,0,0,0,587,589,1,0,0,0,588,590,3,112,56,0,589,
        588,1,0,0,0,589,590,1,0,0,0,590,592,1,0,0,0,591,580,1,0,0,0,591,
        586,1,0,0,0,592,593,1,0,0,0,593,594,5,26,0,0,594,595,3,96,48,0,595,
        596,5,27,0,0,596,728,1,0,0,0,597,598,5,26,0,0,598,599,3,92,46,0,
        599,600,5,27,0,0,600,601,5,26,0,0,601,602,3,96,48,0,602,603,5,27,
        0,0,603,728,1,0,0,0,604,611,5,44,0,0,605,606,3,112,56,0,606,607,
        3,114,57,0,607,612,1,0,0,0,608,609,3,114,57,0,609,610,3,112,56,0,
        610,612,1,0,0,0,611,605,1,0,0,0,611,608,1,0,0,0,611,612,1,0,0,0,
        612,619,1,0,0,0,613,615,3,32,16,0,614,613,1,0,0,0,614,615,1,0,0,
        0,615,616,1,0,0,0,616,620,5,113,0,0,617,620,3,80,40,0,618,620,3,
        32,16,0,619,614,1,0,0,0,619,617,1,0,0,0,619,618,1,0,0,0,620,728,
        1,0,0,0,621,623,5,45,0,0,622,624,3,112,56,0,623,622,1,0,0,0,623,
        624,1,0,0,0,624,631,1,0,0,0,625,627,3,32,16,0,626,625,1,0,0,0,626,
        627,1,0,0,0,627,628,1,0,0,0,628,632,5,114,0,0,629,632,3,80,40,0,
        630,632,3,32,16,0,631,626,1,0,0,0,631,629,1,0,0,0,631,630,1,0,0,
        0,632,728,1,0,0,0,633,635,5,46,0,0,634,636,3,112,56,0,635,634,1,
        0,0,0,635,636,1,0,0,0,636,643,1,0,0,0,637,639,3,32,16,0,638,637,
        1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,644,5,113,0,0,641,644,
        3,80,40,0,642,644,3,32,16,0,643,638,1,0,0,0,643,641,1,0,0,0,643,
        642,1,0,0,0,644,728,1,0,0,0,645,650,5,92,0,0,646,647,5,32,0,0,647,
        648,3,30,15,0,648,649,5,33,0,0,649,651,1,0,0,0,650,646,1,0,0,0,650,
        651,1,0,0,0,651,652,1,0,0,0,652,653,5,28,0,0,653,654,3,30,15,0,654,
        655,5,29,0,0,655,728,1,0,0,0,656,657,5,97,0,0,657,658,5,28,0,0,658,
        659,3,30,15,0,659,660,5,29,0,0,660,728,1,0,0,0,661,674,5,47,0,0,
        662,663,3,116,58,0,663,664,3,114,57,0,664,675,1,0,0,0,665,666,3,
        112,56,0,666,667,3,114,57,0,667,675,1,0,0,0,668,669,3,114,57,0,669,
        670,3,116,58,0,670,675,1,0,0,0,671,672,3,114,57,0,672,673,3,112,
        56,0,673,675,1,0,0,0,674,662,1,0,0,0,674,665,1,0,0,0,674,668,1,0,
        0,0,674,671,1,0,0,0,675,676,1,0,0,0,676,677,3,34,17,0,677,728,1,
        0,0,0,678,685,5,48,0,0,679,680,3,116,58,0,680,681,3,114,57,0,681,
        686,1,0,0,0,682,683,3,114,57,0,683,684,3,116,58,0,684,686,1,0,0,
        0,685,679,1,0,0,0,685,682,1,0,0,0,686,687,1,0,0,0,687,688,3,34,17,
        0,688,728,1,0,0,0,689,690,5,42,0,0,690,691,3,98,49,0,691,692,3,34,
        17,0,692,728,1,0,0,0,693,694,5,77,0,0,694,695,3,106,53,0,695,696,
        5,78,0,0,696,728,1,0,0,0,697,698,5,79,0,0,698,699,3,106,53,0,699,
        700,5,80,0,0,700,728,1,0,0,0,701,702,5,81,0,0,702,703,3,128,64,0,
        703,704,5,82,0,0,704,728,1,0,0,0,705,706,5,83,0,0,706,707,3,128,
        64,0,707,708,5,84,0,0,708,728,1,0,0,0,709,710,5,28,0,0,710,711,5,
        85,0,0,711,712,3,124,62,0,712,713,5,86,0,0,713,714,5,3,0,0,714,728,
        1,0,0,0,715,716,5,87,0,0,716,717,3,138,69,0,717,718,5,86,0,0,718,
        728,1,0,0,0,719,720,5,81,0,0,720,721,3,140,70,0,721,722,5,82,0,0,
        722,728,1,0,0,0,723,724,5,83,0,0,724,725,3,140,70,0,725,726,5,84,
        0,0,726,728,1,0,0,0,727,556,1,0,0,0,727,578,1,0,0,0,727,597,1,0,
        0,0,727,604,1,0,0,0,727,621,1,0,0,0,727,633,1,0,0,0,727,645,1,0,
        0,0,727,656,1,0,0,0,727,661,1,0,0,0,727,678,1,0,0,0,727,689,1,0,
        0,0,727,693,1,0,0,0,727,697,1,0,0,0,727,701,1,0,0,0,727,705,1,0,
        0,0,727,709,1,0,0,0,727,715,1,0,0,0,727,719,1,0,0,0,727,723,1,0,
        0,0,728,95,1,0,0,0,729,730,3,30,15,0,730,731,5,2,0,0,731,732,3,96,
        48,0,732,735,1,0,0,0,733,735,3,30,15,0,734,729,1,0,0,0,734,733,1,
        0,0,0,735,97,1,0,0,0,736,737,5,108,0,0,737,738,5,28,0,0,738,739,
        7,7,0,0,739,740,5,43,0,0,740,749,3,30,15,0,741,747,5,109,0,0,742,
        743,5,28,0,0,743,744,7,5,0,0,744,748,5,29,0,0,745,748,5,19,0,0,746,
        748,5,20,0,0,747,742,1,0,0,0,747,745,1,0,0,0,747,746,1,0,0,0,748,
        750,1,0,0,0,749,741,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,
        752,5,29,0,0,752,99,1,0,0,0,753,754,5,28,0,0,754,755,7,7,0,0,755,
        756,5,34,0,0,756,757,3,6,3,0,757,758,5,29,0,0,758,101,1,0,0,0,759,
        760,6,51,-1,0,760,761,5,26,0,0,761,762,3,102,51,0,762,763,7,3,0,
        0,763,764,3,102,51,0,764,765,5,27,0,0,765,768,1,0,0,0,766,768,3,
        100,50,0,767,759,1,0,0,0,767,766,1,0,0,0,768,774,1,0,0,0,769,770,
        10,3,0,0,770,771,7,3,0,0,771,773,3,102,51,4,772,769,1,0,0,0,773,
        776,1,0,0,0,774,772,1,0,0,0,774,775,1,0,0,0,775,103,1,0,0,0,776,
        774,1,0,0,0,777,782,3,30,15,0,778,779,5,112,0,0,779,781,3,30,15,
        0,780,778,1,0,0,0,781,784,1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,
        0,783,105,1,0,0,0,784,782,1,0,0,0,785,790,3,104,52,0,786,787,5,4,
        0,0,787,789,3,104,52,0,788,786,1,0,0,0,789,792,1,0,0,0,790,788,1,
        0,0,0,790,791,1,0,0,0,791,107,1,0,0,0,792,790,1,0,0,0,793,799,3,
        30,15,0,794,795,3,30,15,0,795,796,5,2,0,0,796,797,3,108,54,0,797,
        799,1,0,0,0,798,793,1,0,0,0,798,794,1,0,0,0,799,109,1,0,0,0,800,
        801,3,36,18,0,801,111,1,0,0,0,802,808,5,108,0,0,803,809,3,66,33,
        0,804,805,5,28,0,0,805,806,3,30,15,0,806,807,5,29,0,0,807,809,1,
        0,0,0,808,803,1,0,0,0,808,804,1,0,0,0,809,113,1,0,0,0,810,816,5,
        109,0,0,811,817,3,66,33,0,812,813,5,28,0,0,813,814,3,30,15,0,814,
        815,5,29,0,0,815,817,1,0,0,0,816,811,1,0,0,0,816,812,1,0,0,0,817,
        115,1,0,0,0,818,819,5,108,0,0,819,820,5,28,0,0,820,821,3,28,14,0,
        821,822,5,29,0,0,822,117,1,0,0,0,823,824,5,108,0,0,824,825,5,28,
        0,0,825,826,3,28,14,0,826,827,5,29,0,0,827,119,1,0,0,0,828,829,5,
        120,0,0,829,830,3,108,54,0,830,831,5,124,0,0,831,121,1,0,0,0,832,
        833,3,30,15,0,833,834,5,112,0,0,834,835,5,5,0,0,835,836,3,6,3,0,
        836,123,1,0,0,0,837,842,3,122,61,0,838,839,5,4,0,0,839,841,3,122,
        61,0,840,838,1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,
        0,0,843,125,1,0,0,0,844,842,1,0,0,0,845,854,3,30,15,0,846,847,3,
        30,15,0,847,848,7,12,0,0,848,849,3,6,3,0,849,854,1,0,0,0,850,851,
        3,30,15,0,851,852,5,127,0,0,852,854,1,0,0,0,853,845,1,0,0,0,853,
        846,1,0,0,0,853,850,1,0,0,0,854,127,1,0,0,0,855,860,3,126,63,0,856,
        857,5,4,0,0,857,859,3,126,63,0,858,856,1,0,0,0,859,862,1,0,0,0,860,
        858,1,0,0,0,860,861,1,0,0,0,861,129,1,0,0,0,862,860,1,0,0,0,863,
        864,5,116,0,0,864,865,5,4,0,0,865,866,5,19,0,0,866,867,5,116,0,0,
        867,868,5,4,0,0,868,869,5,35,0,0,869,870,5,116,0,0,870,131,1,0,0,
        0,871,872,5,116,0,0,872,873,5,4,0,0,873,874,5,20,0,0,874,875,5,116,
        0,0,875,876,5,4,0,0,876,877,5,35,0,0,877,878,5,116,0,0,878,133,1,
        0,0,0,879,880,5,116,0,0,880,881,5,4,0,0,881,882,7,13,0,0,882,883,
        5,116,0,0,883,884,5,4,0,0,884,885,5,35,0,0,885,886,5,116,0,0,886,
        135,1,0,0,0,887,888,5,116,0,0,888,889,5,4,0,0,889,890,5,116,0,0,
        890,891,5,28,0,0,891,892,5,36,0,0,892,893,5,28,0,0,893,894,5,37,
        0,0,894,895,5,116,0,0,895,896,5,29,0,0,896,897,5,29,0,0,897,137,
        1,0,0,0,898,903,3,130,65,0,899,903,3,132,66,0,900,903,3,134,67,0,
        901,903,3,136,68,0,902,898,1,0,0,0,902,899,1,0,0,0,902,900,1,0,0,
        0,902,901,1,0,0,0,903,139,1,0,0,0,904,909,3,6,3,0,905,906,5,4,0,
        0,906,908,3,6,3,0,907,905,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,
        0,909,910,1,0,0,0,910,141,1,0,0,0,911,909,1,0,0,0,92,149,159,171,
        173,184,195,202,210,215,221,228,245,250,257,261,271,281,292,303,
        311,313,321,324,330,337,342,350,356,364,378,381,385,398,401,405,
        415,422,440,448,451,454,457,459,469,477,482,487,492,494,512,521,
        528,554,558,561,564,567,569,576,580,583,586,589,591,611,614,619,
        623,626,631,635,638,643,650,674,685,727,734,747,749,767,774,782,
        790,798,808,816,842,853,860,902,909
    ]

class LaTeXParser ( Parser ):

    grammarFileName = "LaTeX.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'~'", "'.'", "'\\\\'", "'if'",
                     "'\\ '", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "'\\quad'", "'\\qquad'", "<INVALID>", "'\\negmedspace'",
                     "'\\negthickspace'", "'\\left'", "'\\right'", "<INVALID>",
                     "'+'", "<INVALID>", "'*'", "'/'", "'\\cup'", "<INVALID>",
                     "'\\cap'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "'\\{'", "'\\}'", "<INVALID>", "<INVALID>", "<INVALID>",
                     "'\\hline'", "'\\overline'", "'\\smash{\\big)}'", "'\\right|'",
                     "'\\left|'", "'\\langle'", "'\\rangle'", "'\\lim'",
                     "<INVALID>", "<INVALID>", "'\\iint'", "'\\oint'", "'\\sum'",
                     "'\\prod'", "'\\exp'", "'\\log'", "'\\lg'", "'\\ln'",
                     "'\\sin'", "'\\cos'", "'\\tan'", "'\\csc'", "'\\sec'",
                     "'\\cot'", "'\\arcsin'", "'\\arccos'", "'\\arctan'",
                     "'\\arccsc'", "'\\arcsec'", "'\\arccot'", "'\\sinh'",
                     "'\\sech'", "'\\cosh'", "'\\csch'", "'\\tanh'", "'\\coth'",
                     "'\\arcsinh'", "'\\arcsech'", "'\\arccosh'", "'\\arccsch'",
                     "'\\arctanh'", "'\\arccoth'", "'\\begin{bmatrix}'",
                     "'\\end{bmatrix}'", "'\\begin{vmatrix}'", "'\\end{vmatrix}'",
                     "'\\begin{almatrix}'", "'\\end{almatrix}'", "'\\begin{armatrix}'",
                     "'\\end{armatrix}'", "'\\begin{array}{lc}'", "'\\end{array}'",
                     "'\\begin{array}{r}'", "'\\lfloor'", "'\\rfloor'",
                     "'\\lceil'", "'\\rceil'", "'\\sqrt'", "'\\abs'", "'\\Re'",
                     "'\\Im'", "'\\arg'", "<INVALID>", "'\\times'", "'\\cdot'",
                     "'\\div'", "<INVALID>", "'\\binom'", "'\\dbinom'",
                     "'\\tbinom'", "'\\mathit'", "'\\angle'", "'\\circ'",
                     "'_'", "'^'", "':'", "';'", "'&'", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "'\\neq'", "<INVALID>", "<INVALID>", "'\\leqq'", "'\\leqslant'",
                     "<INVALID>", "<INVALID>", "'\\equiv'", "'otherwise'",
                     "'\\geqq'", "'\\geqslant'", "'!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                      "<INVALID>", "<INVALID>", "EWS", "WS", "THINSPACE",
                      "MEDSPACE", "THICKSPACE", "QUAD", "QQUAD", "NEGTHINSPACE",
                      "NEGMEDSPACE", "NEGTHICKSPACE", "CMD_LEFT", "CMD_RIGHT",
                      "IGNORE", "ADD", "SUB", "MUL", "DIV", "SET_ADD", "SET_SUB",
                      "SET_INTERSECT", "L_PAREN", "R_PAREN", "L_BRACE",
                      "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL", "L_BRACKET",
                      "R_BRACKET", "BAR", "HLINE", "OVERLINE", "SMASH_BIG",
                      "R_BAR", "L_BAR", "L_ANGLE", "R_ANGLE", "FUNC_LIM",
                      "LIM_APPROACH_SYM", "FUNC_INT", "FUNC_IINT", "FUNC_OINT",
                      "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG", "FUNC_LG",
                      "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN", "FUNC_CSC",
                      "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN", "FUNC_ARCCOS",
                      "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC", "FUNC_ARCCOT",
                      "FUNC_SINH", "FUNC_SECH", "FUNC_COSH", "FUNC_CSCH",
                      "FUNC_TANH", "FUNC_COTH", "FUNC_ARCSINH", "FUNC_ARCSECH",
                      "FUNC_ARCCOSH", "FUNC_ARCCSCH", "FUNC_ARCTANH", "FUNC_ARCCOTH",
                      "FUNC_MATRIX_START", "FUNC_MATRIX_END", "FUNC_MATRIX_DETERMINENT_START",
                      "FUNC_MATRIX_DETERMINENT_END", "FUNC_AL_MATRIX_PIECEWISE_START",
                      "FUNC_AL_MATRIX_PIECEWISE_END", "FUNC_AR_MATRIX_PIECEWISE_START",
                      "FUNC_AR_MATRIX_PIECEWISE_END", "FUNC_PIECEWISE_START",
                      "FUNC_ARRAY_END", "FUNC_CALCULATION_START", "L_FLOOR",
                      "R_FLOOR", "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_ABS",
                      "FUNC_RE", "FUNC_IM", "FUNC_ARG", "FUNC_OVERLINE",
                      "CMD_TIMES", "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM",
                      "CMD_DBINOM", "CMD_TBINOM", "CMD_MATHIT", "CMD_ANGLE",
                      "CMD_CIRCLE", "UNDERSCORE", "CARET", "COLON", "SEMI_COLON",
                      "AMP", "DIFFERENTIAL", "MULTI_DIFFERENTIAL", "LETTER",
                      "NUMBER", "DIGIT", "EQUAL", "NEQ", "LT", "LTE", "LTE_Q",
                      "LTE_S", "GT", "GTE", "EQUIV", "OTHERWISE", "GTE_Q",
                      "GTE_S", "BANG", "SINGLE_QUOTES", "SYMBOL" ]

    RULE_left_parentheses = 0
    RULE_right_parentheses = 1
    RULE_math = 2
    RULE_relation = 3
    RULE_equation = 4
    RULE_equation_list = 5
    RULE_struct_relation = 6
    RULE_struct_expr = 7
    RULE_struct_form = 8
    RULE_struct_value = 9
    RULE_value = 10
    RULE_interval_opr = 11
    RULE_interval = 12
    RULE_interval_expr = 13
    RULE_equality = 14
    RULE_expr = 15
    RULE_additive = 16
    RULE_mp = 17
    RULE_mp_nofunc = 18
    RULE_unary = 19
    RULE_unary_nofunc = 20
    RULE_postfix = 21
    RULE_postfix_nofunc = 22
    RULE_postfix_op = 23
    RULE_eval_at = 24
    RULE_eval_at_sub = 25
    RULE_eval_at_sup = 26
    RULE_exp = 27
    RULE_exp_nofunc = 28
    RULE_comp = 29
    RULE_comp_nofunc = 30
    RULE_group = 31
    RULE_abs_group = 32
    RULE_atom = 33
    RULE_angle = 34
    RULE_angle_points = 35
    RULE_bra = 36
    RULE_ket = 37
    RULE_mathit = 38
    RULE_mathit_text = 39
    RULE_frac = 40
    RULE_binom = 41
    RULE_floor = 42
    RULE_ceil = 43
    RULE_func_normal = 44
    RULE_func_name = 45
    RULE_func_composition = 46
    RULE_func = 47
    RULE_args = 48
    RULE_limit_sub = 49
    RULE_set_notation_sub = 50
    RULE_set_notation_sub_expr = 51
    RULE_matrix_row = 52
    RULE_matrix = 53
    RULE_func_arg = 54
    RULE_func_arg_noparens = 55
    RULE_subexpr = 56
    RULE_supexpr = 57
    RULE_subeq = 58
    RULE_supeq = 59
    RULE_vector = 60
    RULE_piecewise_func = 61
    RULE_piecewise = 62
    RULE_matrix_piecewise_func = 63
    RULE_matrix_piecewise = 64
    RULE_calculation_add = 65
    RULE_calculation_sub = 66
    RULE_calculation_mul = 67
    RULE_calculation_div = 68
    RULE_calculation = 69
    RULE_matrix_relation = 70

    ruleNames =  [ "left_parentheses", "right_parentheses", "math", "relation",
                   "equation", "equation_list", "struct_relation", "struct_expr",
                   "struct_form", "struct_value", "value", "interval_opr",
                   "interval", "interval_expr", "equality", "expr", "additive",
                   "mp", "mp_nofunc", "unary", "unary_nofunc", "postfix",
                   "postfix_nofunc", "postfix_op", "eval_at", "eval_at_sub",
                   "eval_at_sup", "exp", "exp_nofunc", "comp", "comp_nofunc",
                   "group", "abs_group", "atom", "angle", "angle_points",
                   "bra", "ket", "mathit", "mathit_text", "frac", "binom",
                   "floor", "ceil", "func_normal", "func_name", "func_composition",
                   "func", "args", "limit_sub", "set_notation_sub", "set_notation_sub_expr",
                   "matrix_row", "matrix", "func_arg", "func_arg_noparens",
                   "subexpr", "supexpr", "subeq", "supeq", "vector", "piecewise_func",
                   "piecewise", "matrix_piecewise_func", "matrix_piecewise",
                   "calculation_add", "calculation_sub", "calculation_mul",
                   "calculation_div", "calculation", "matrix_relation" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    EWS=6
    WS=7
    THINSPACE=8
    MEDSPACE=9
    THICKSPACE=10
    QUAD=11
    QQUAD=12
    NEGTHINSPACE=13
    NEGMEDSPACE=14
    NEGTHICKSPACE=15
    CMD_LEFT=16
    CMD_RIGHT=17
    IGNORE=18
    ADD=19
    SUB=20
    MUL=21
    DIV=22
    SET_ADD=23
    SET_SUB=24
    SET_INTERSECT=25
    L_PAREN=26
    R_PAREN=27
    L_BRACE=28
    R_BRACE=29
    L_BRACE_LITERAL=30
    R_BRACE_LITERAL=31
    L_BRACKET=32
    R_BRACKET=33
    BAR=34
    HLINE=35
    OVERLINE=36
    SMASH_BIG=37
    R_BAR=38
    L_BAR=39
    L_ANGLE=40
    R_ANGLE=41
    FUNC_LIM=42
    LIM_APPROACH_SYM=43
    FUNC_INT=44
    FUNC_IINT=45
    FUNC_OINT=46
    FUNC_SUM=47
    FUNC_PROD=48
    FUNC_EXP=49
    FUNC_LOG=50
    FUNC_LG=51
    FUNC_LN=52
    FUNC_SIN=53
    FUNC_COS=54
    FUNC_TAN=55
    FUNC_CSC=56
    FUNC_SEC=57
    FUNC_COT=58
    FUNC_ARCSIN=59
    FUNC_ARCCOS=60
    FUNC_ARCTAN=61
    FUNC_ARCCSC=62
    FUNC_ARCSEC=63
    FUNC_ARCCOT=64
    FUNC_SINH=65
    FUNC_SECH=66
    FUNC_COSH=67
    FUNC_CSCH=68
    FUNC_TANH=69
    FUNC_COTH=70
    FUNC_ARCSINH=71
    FUNC_ARCSECH=72
    FUNC_ARCCOSH=73
    FUNC_ARCCSCH=74
    FUNC_ARCTANH=75
    FUNC_ARCCOTH=76
    FUNC_MATRIX_START=77
    FUNC_MATRIX_END=78
    FUNC_MATRIX_DETERMINENT_START=79
    FUNC_MATRIX_DETERMINENT_END=80
    FUNC_AL_MATRIX_PIECEWISE_START=81
    FUNC_AL_MATRIX_PIECEWISE_END=82
    FUNC_AR_MATRIX_PIECEWISE_START=83
    FUNC_AR_MATRIX_PIECEWISE_END=84
    FUNC_PIECEWISE_START=85
    FUNC_ARRAY_END=86
    FUNC_CALCULATION_START=87
    L_FLOOR=88
    R_FLOOR=89
    L_CEIL=90
    R_CEIL=91
    FUNC_SQRT=92
    FUNC_ABS=93
    FUNC_RE=94
    FUNC_IM=95
    FUNC_ARG=96
    FUNC_OVERLINE=97
    CMD_TIMES=98
    CMD_CDOT=99
    CMD_DIV=100
    CMD_FRAC=101
    CMD_BINOM=102
    CMD_DBINOM=103
    CMD_TBINOM=104
    CMD_MATHIT=105
    CMD_ANGLE=106
    CMD_CIRCLE=107
    UNDERSCORE=108
    CARET=109
    COLON=110
    SEMI_COLON=111
    AMP=112
    DIFFERENTIAL=113
    MULTI_DIFFERENTIAL=114
    LETTER=115
    NUMBER=116
    DIGIT=117
    EQUAL=118
    NEQ=119
    LT=120
    LTE=121
    LTE_Q=122
    LTE_S=123
    GT=124
    GTE=125
    EQUIV=126
    OTHERWISE=127
    GTE_Q=128
    GTE_S=129
    BANG=130
    SINGLE_QUOTES=131
    SYMBOL=132

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Left_parenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_left_parentheses




    def left_parentheses(self):

        localctx = LaTeXParser.Left_parenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_left_parentheses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 4630511616) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Right_parenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_right_parentheses




    def right_parentheses(self):

        localctx = LaTeXParser.Right_parenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_right_parentheses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 9261023232) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def struct_relation(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_relationContext,0)


        def equation_list(self):
            return self.getTypedRuleContext(LaTeXParser.Equation_listContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_math




    def math(self):

        localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_math)
        try:
            self.state = 149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.relation(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.struct_relation(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 148
                self.equation_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def LTE(self):
            return self.getToken(LaTeXParser.LTE, 0)

        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def GTE(self):
            return self.getToken(LaTeXParser.GTE, 0)

        def NEQ(self):
            return self.getToken(LaTeXParser.NEQ, 0)

        def EQUIV(self):
            return self.getToken(LaTeXParser.EQUIV, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_relation



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 159
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 154
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 155
                    _la = self._input.LA(1)
                    if not((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 463) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 156
                    self.relation(3)
                self.state = 161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EquationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def LTE(self):
            return self.getToken(LaTeXParser.LTE, 0)

        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def GTE(self):
            return self.getToken(LaTeXParser.GTE, 0)

        def NEQ(self):
            return self.getToken(LaTeXParser.NEQ, 0)

        def EQUIV(self):
            return self.getToken(LaTeXParser.EQUIV, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_equation




    def equation(self):

        localctx = LaTeXParser.EquationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_equation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 162
            self.relation(0)
            self.state = 163
            _la = self._input.LA(1)
            if not((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 463) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 164
            self.relation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Equation_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.EquationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.EquationContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.SEMI_COLON)
            else:
                return self.getToken(LaTeXParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_equation_list




    def equation_list(self):

        localctx = LaTeXParser.Equation_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_equation_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.equation()
            self.state = 173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==111:
                self.state = 171
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [111]:
                    self.state = 167
                    self.match(LaTeXParser.SEMI_COLON)
                    self.state = 168
                    self.equation()
                    pass
                elif token in [1]:
                    self.state = 169
                    self.match(LaTeXParser.T__0)
                    self.state = 170
                    self.equation()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_expr(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_exprContext,0)


        def struct_relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Struct_relationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Struct_relationContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_struct_relation



    def struct_relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Struct_relationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_struct_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self.struct_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Struct_relationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_relation)
                    self.state = 179
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")

                    self.state = 180
                    self.match(LaTeXParser.EQUAL)
                    self.state = 181
                    self.struct_relation(3)
                self.state = 186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Struct_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def struct_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Struct_exprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Struct_exprContext,i)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def SET_ADD(self):
            return self.getToken(LaTeXParser.SET_ADD, 0)

        def SET_SUB(self):
            return self.getToken(LaTeXParser.SET_SUB, 0)

        def SET_INTERSECT(self):
            return self.getToken(LaTeXParser.SET_INTERSECT, 0)

        def struct_value(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_valueContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_struct_expr



    def struct_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Struct_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_struct_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 188
                self.match(LaTeXParser.L_PAREN)
                self.state = 189
                self.struct_expr(0)
                self.state = 190
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 191
                self.struct_expr(0)
                self.state = 192
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 2:
                self.state = 194
                self.struct_value()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 202
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Struct_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_expr)
                    self.state = 197
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 198
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 199
                    self.struct_expr(4)
                self.state = 204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Struct_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ValueContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ValueContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_struct_form




    def struct_form(self):

        localctx = LaTeXParser.Struct_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_struct_form)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.value()
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 206
                self.match(LaTeXParser.T__1)
                self.state = 207
                self.value()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def left_parentheses(self):
            return self.getTypedRuleContext(LaTeXParser.Left_parenthesesContext,0)


        def right_parentheses(self):
            return self.getTypedRuleContext(LaTeXParser.Right_parenthesesContext,0)


        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ValueContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ValueContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_struct_value




    def struct_value(self):

        localctx = LaTeXParser.Struct_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_struct_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.left_parentheses()
            self.state = 215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 214
                self.value()


            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 217
                self.match(LaTeXParser.T__1)
                self.state = 218
                self.value()
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.right_parentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_value(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_valueContext,0)


        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_value




    def value(self):

        localctx = LaTeXParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_value)
        try:
            self.state = 228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.struct_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.relation(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_oprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_interval_opr




    def interval_opr(self):

        localctx = LaTeXParser.Interval_oprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interval_opr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 13086228480) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interval_opr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Interval_oprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Interval_oprContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_interval




    def interval(self):

        localctx = LaTeXParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.interval_opr()
            self.state = 233
            self.expr()
            self.state = 234
            self.match(LaTeXParser.T__1)
            self.state = 235
            self.expr()
            self.state = 236
            self.interval_opr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def interval_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Interval_exprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Interval_exprContext,i)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def SET_ADD(self):
            return self.getToken(LaTeXParser.SET_ADD, 0)

        def SET_SUB(self):
            return self.getToken(LaTeXParser.SET_SUB, 0)

        def SET_INTERSECT(self):
            return self.getToken(LaTeXParser.SET_INTERSECT, 0)

        def struct_value(self):
            return self.getTypedRuleContext(LaTeXParser.Struct_valueContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def interval(self):
            return self.getTypedRuleContext(LaTeXParser.IntervalContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_interval_expr



    def interval_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Interval_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_interval_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 239
                self.match(LaTeXParser.L_PAREN)
                self.state = 240
                self.interval_expr(0)
                self.state = 241
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 242
                    self.interval_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 243
                    self.struct_value()
                    pass

                elif la_ == 3:
                    self.state = 244
                    self.atom()
                    pass


                self.state = 247
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 2:
                self.state = 249
                self.interval()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Interval_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_interval_expr)
                    self.state = 252
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 253
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 257
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 254
                        self.interval_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 255
                        self.struct_value()
                        pass

                    elif la_ == 3:
                        self.state = 256
                        self.atom()
                        pass


                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_equality




    def equality(self):

        localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.expr()
            self.state = 265
            self.match(LaTeXParser.EQUAL)
            self.state = 266
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_notation_sub_expr(self):
            return self.getTypedRuleContext(LaTeXParser.Set_notation_sub_exprContext,0)


        def interval_expr(self):
            return self.getTypedRuleContext(LaTeXParser.Interval_exprContext,0)


        def additive(self):
            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_expr




    def expr(self):

        localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr)
        try:
            self.state = 271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self.set_notation_sub_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 269
                self.interval_expr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 270
                self.additive(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(LaTeXParser.MpContext,0)


        def additive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_additive



    def additive(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_additive, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 281
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
                    self.state = 276
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 277
                    _la = self._input.LA(1)
                    if not(_la==19 or _la==20):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 278
                    self.additive(3)
                self.state = 283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)


        def mp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.MpContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.MpContext,i)


        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mp



    def mp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_mp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 292
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
                    self.state = 287
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 288
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==22 or (((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 4103) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 289
                    self.mp(3)
                self.state = 294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)


        def mp_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)


        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mp_nofunc



    def mp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_mp_nofunc, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 303
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
                    self.state = 298
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 299
                    _la = self._input.LA(1)
                    if not(_la==21 or _la==22 or (((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & 4103) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 300
                    self.mp_nofunc(3)
                self.state = 305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_unary




    def unary(self):

        localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unary)
        self._la = 0 # Token type
        try:
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 307
                self.unary()
                pass
            elif token in [26, 28, 30, 32, 34, 36, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 87, 88, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 113, 115, 116, 120, 132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 308
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 311
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)


        def postfix_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_unary_nofunc




    def unary_nofunc(self):

        localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unary_nofunc)
        self._la = 0 # Token type
        try:
            self.state = 324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20]:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 316
                self.unary_nofunc()
                pass
            elif token in [26, 28, 30, 32, 34, 36, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 87, 88, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 113, 115, 116, 120, 132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 317
                self.postfix()
                self.state = 321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 318
                        self.postfix_nofunc()
                    self.state = 323
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix




    def postfix(self):

        localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.exp(0)
            self.state = 330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 327
                    self.postfix_op()
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix_nofunc




    def postfix_nofunc(self):

        localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.exp_nofunc(0)
            self.state = 337
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 334
                    self.postfix_op()
                self.state = 339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(LaTeXParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix_op




    def postfix_op(self):

        localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_postfix_op)
        try:
            self.state = 342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [130]:
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.match(LaTeXParser.BANG)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.eval_at()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)


        def eval_at_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at




    def eval_at(self):

        localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(LaTeXParser.BAR)
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 345
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 346
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 347
                self.eval_at_sup()
                self.state = 348
                self.eval_at_sub()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at_sub




    def eval_at_sub(self):

        localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 353
            self.match(LaTeXParser.L_BRACE)
            self.state = 356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 354
                self.expr()
                pass

            elif la_ == 2:
                self.state = 355
                self.equality()
                pass


            self.state = 358
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_supContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at_sup




    def eval_at_sup(self):

        localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(LaTeXParser.CARET)
            self.state = 361
            self.match(LaTeXParser.L_BRACE)
            self.state = 364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 362
                self.expr()
                pass

            elif la_ == 2:
                self.state = 363
                self.equality()
                pass


            self.state = 366
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(LaTeXParser.CompContext,0)


        def exp(self):
            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)


        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_exp



    def exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
                    self.state = 371
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 372
                    self.match(LaTeXParser.CARET)
                    self.state = 378
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [34, 39, 40, 101, 102, 103, 104, 105, 106, 113, 115, 116, 132]:
                        self.state = 373
                        self.atom()
                        pass
                    elif token in [28]:
                        self.state = 374
                        self.match(LaTeXParser.L_BRACE)
                        self.state = 375
                        self.expr()
                        self.state = 376
                        self.match(LaTeXParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 381
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                    if la_ == 1:
                        self.state = 380
                        self.subexpr()


                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Exp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)


        def exp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)


        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_exp_nofunc



    def exp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
                    self.state = 391
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 392
                    self.match(LaTeXParser.CARET)
                    self.state = 398
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [34, 39, 40, 101, 102, 103, 104, 105, 106, 113, 115, 116, 132]:
                        self.state = 393
                        self.atom()
                        pass
                    elif token in [28]:
                        self.state = 394
                        self.match(LaTeXParser.L_BRACE)
                        self.state = 395
                        self.expr()
                        self.state = 396
                        self.match(LaTeXParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 401
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        self.state = 400
                        self.subexpr()


                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)


        def func(self):
            return self.getTypedRuleContext(LaTeXParser.FuncContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def floor(self):
            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)


        def ceil(self):
            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)


        def vector(self):
            return self.getTypedRuleContext(LaTeXParser.VectorContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_comp




    def comp(self):

        localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_comp)
        try:
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 408
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 409
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 410
                self.func()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 411
                self.atom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 412
                self.floor()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 413
                self.ceil()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 414
                self.vector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def floor(self):
            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)


        def ceil(self):
            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_comp_nofunc




    def comp_nofunc(self):

        localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_comp_nofunc)
        try:
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 419
                self.atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 420
                self.floor()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 421
                self.ceil()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def L_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)

        def R_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_group




    def group(self):

        localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_group)
        try:
            self.state = 440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.match(LaTeXParser.L_PAREN)
                self.state = 425
                self.expr()
                self.state = 426
                self.match(LaTeXParser.R_PAREN)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.match(LaTeXParser.L_BRACKET)
                self.state = 429
                self.expr()
                self.state = 430
                self.match(LaTeXParser.R_BRACKET)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 432
                self.match(LaTeXParser.L_BRACE)
                self.state = 433
                self.expr()
                self.state = 434
                self.match(LaTeXParser.R_BRACE)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 436
                self.match(LaTeXParser.L_BRACE_LITERAL)
                self.state = 437
                self.expr()
                self.state = 438
                self.match(LaTeXParser.R_BRACE_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.BAR)
            else:
                return self.getToken(LaTeXParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_abs_group




    def abs_group(self):

        localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_abs_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(LaTeXParser.BAR)
            self.state = 443
            self.expr()
            self.state = 444
            self.match(LaTeXParser.BAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def SINGLE_QUOTES(self):
            return self.getToken(LaTeXParser.SINGLE_QUOTES, 0)

        def NUMBER(self):
            return self.getToken(LaTeXParser.NUMBER, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def mathit(self):
            return self.getTypedRuleContext(LaTeXParser.MathitContext,0)


        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(LaTeXParser.BinomContext,0)


        def bra(self):
            return self.getTypedRuleContext(LaTeXParser.BraContext,0)


        def ket(self):
            return self.getTypedRuleContext(LaTeXParser.KetContext,0)


        def angle(self):
            return self.getTypedRuleContext(LaTeXParser.AngleContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_atom




    def atom(self):

        localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115, 132]:
                self.enterOuterAlt(localctx, 1)
                self.state = 446
                _la = self._input.LA(1)
                if not(_la==115 or _la==132):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 448
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                    if la_ == 1:
                        self.state = 447
                        self.subexpr()


                    self.state = 451
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                    if la_ == 1:
                        self.state = 450
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    pass

                elif la_ == 2:
                    self.state = 454
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                    if la_ == 1:
                        self.state = 453
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    self.state = 457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                    if la_ == 1:
                        self.state = 456
                        self.subexpr()


                    pass


                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.match(LaTeXParser.NUMBER)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 3)
                self.state = 462
                self.match(LaTeXParser.DIFFERENTIAL)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 4)
                self.state = 463
                self.mathit()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 5)
                self.state = 464
                self.frac()
                pass
            elif token in [102, 103, 104]:
                self.enterOuterAlt(localctx, 6)
                self.state = 465
                self.binom()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 466
                self.bra()
                pass
            elif token in [34, 39]:
                self.enterOuterAlt(localctx, 8)
                self.state = 467
                self.ket()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 9)
                self.state = 468
                self.angle()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AngleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_ANGLE(self):
            return self.getToken(LaTeXParser.CMD_ANGLE, 0)

        def angle_points(self):
            return self.getTypedRuleContext(LaTeXParser.Angle_pointsContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_angle




    def angle(self):

        localctx = LaTeXParser.AngleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_angle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(LaTeXParser.CMD_ANGLE)
            self.state = 472
            self.angle_points()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_pointsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.LETTER)
            else:
                return self.getToken(LaTeXParser.LETTER, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_angle_points




    def angle_points(self):

        localctx = LaTeXParser.Angle_pointsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_angle_points)
        try:
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 475
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 474
                        self.match(LaTeXParser.LETTER)

                    else:
                        raise NoViableAltException(self)
                    self.state = 477
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

                self.state = 480
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 479
                        self.match(LaTeXParser.LETTER)

                    else:
                        raise NoViableAltException(self)
                    self.state = 482
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                self.state = 485
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 484
                        self.match(LaTeXParser.LETTER)

                    else:
                        raise NoViableAltException(self)
                    self.state = 487
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 489
                        self.match(LaTeXParser.LETTER)

                    else:
                        raise NoViableAltException(self)
                    self.state = 492
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_ANGLE(self):
            return self.getToken(LaTeXParser.L_ANGLE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BAR(self):
            return self.getToken(LaTeXParser.R_BAR, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_bra




    def bra(self):

        localctx = LaTeXParser.BraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_bra)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(LaTeXParser.L_ANGLE)
            self.state = 497
            self.expr()
            self.state = 498
            _la = self._input.LA(1)
            if not(_la==34 or _la==38):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_ANGLE(self):
            return self.getToken(LaTeXParser.R_ANGLE, 0)

        def L_BAR(self):
            return self.getToken(LaTeXParser.L_BAR, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_ket




    def ket(self):

        localctx = LaTeXParser.KetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_ket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            _la = self._input.LA(1)
            if not(_la==34 or _la==39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 501
            self.expr()
            self.state = 502
            self.match(LaTeXParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATHIT(self):
            return self.getToken(LaTeXParser.CMD_MATHIT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def mathit_text(self):
            return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit




    def mathit(self):

        localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_mathit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(LaTeXParser.CMD_MATHIT)
            self.state = 505
            self.match(LaTeXParser.L_BRACE)
            self.state = 506
            self.mathit_text()
            self.state = 507
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mathit_textContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.LETTER)
            else:
                return self.getToken(LaTeXParser.LETTER, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit_text




    def mathit_text(self):

        localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_mathit_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==115:
                self.state = 509
                self.match(LaTeXParser.LETTER)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FracContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upperd = None # Token
            self.upper = None # ExprContext
            self.lowerd = None # Token
            self.lower = None # ExprContext

        def CMD_FRAC(self):
            return self.getToken(LaTeXParser.CMD_FRAC, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.DIGIT)
            else:
                return self.getToken(LaTeXParser.DIGIT, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_frac




    def frac(self):

        localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(LaTeXParser.CMD_FRAC)
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.state = 516
                localctx.upperd = self.match(LaTeXParser.DIGIT)
                pass
            elif token in [28]:
                self.state = 517
                self.match(LaTeXParser.L_BRACE)
                self.state = 518
                localctx.upper = self.expr()
                self.state = 519
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [117]:
                self.state = 523
                localctx.lowerd = self.match(LaTeXParser.DIGIT)
                pass
            elif token in [28]:
                self.state = 524
                self.match(LaTeXParser.L_BRACE)
                self.state = 525
                localctx.lower = self.expr()
                self.state = 526
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # ExprContext
            self.k = None # ExprContext

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def CMD_BINOM(self):
            return self.getToken(LaTeXParser.CMD_BINOM, 0)

        def CMD_DBINOM(self):
            return self.getToken(LaTeXParser.CMD_DBINOM, 0)

        def CMD_TBINOM(self):
            return self.getToken(LaTeXParser.CMD_TBINOM, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_binom




    def binom(self):

        localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_binom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            _la = self._input.LA(1)
            if not((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & 7) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 531
            self.match(LaTeXParser.L_BRACE)
            self.state = 532
            localctx.n = self.expr()
            self.state = 533
            self.match(LaTeXParser.R_BRACE)
            self.state = 534
            self.match(LaTeXParser.L_BRACE)
            self.state = 535
            localctx.k = self.expr()
            self.state = 536
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # ExprContext

        def L_FLOOR(self):
            return self.getToken(LaTeXParser.L_FLOOR, 0)

        def R_FLOOR(self):
            return self.getToken(LaTeXParser.R_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_floor




    def floor(self):

        localctx = LaTeXParser.FloorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_floor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(LaTeXParser.L_FLOOR)
            self.state = 539
            localctx.val = self.expr()
            self.state = 540
            self.match(LaTeXParser.R_FLOOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CeilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # ExprContext

        def L_CEIL(self):
            return self.getToken(LaTeXParser.L_CEIL, 0)

        def R_CEIL(self):
            return self.getToken(LaTeXParser.R_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_ceil




    def ceil(self):

        localctx = LaTeXParser.CeilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ceil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(LaTeXParser.L_CEIL)
            self.state = 543
            localctx.val = self.expr()
            self.state = 544
            self.match(LaTeXParser.R_CEIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_EXP(self):
            return self.getToken(LaTeXParser.FUNC_EXP, 0)

        def FUNC_LOG(self):
            return self.getToken(LaTeXParser.FUNC_LOG, 0)

        def FUNC_LG(self):
            return self.getToken(LaTeXParser.FUNC_LG, 0)

        def FUNC_LN(self):
            return self.getToken(LaTeXParser.FUNC_LN, 0)

        def FUNC_SIN(self):
            return self.getToken(LaTeXParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(LaTeXParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(LaTeXParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(LaTeXParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(LaTeXParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(LaTeXParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(LaTeXParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(LaTeXParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(LaTeXParser.FUNC_TANH, 0)

        def FUNC_SECH(self):
            return self.getToken(LaTeXParser.FUNC_SECH, 0)

        def FUNC_CSCH(self):
            return self.getToken(LaTeXParser.FUNC_CSCH, 0)

        def FUNC_COTH(self):
            return self.getToken(LaTeXParser.FUNC_COTH, 0)

        def FUNC_ARCSINH(self):
            return self.getToken(LaTeXParser.FUNC_ARCSINH, 0)

        def FUNC_ARCCOSH(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOSH, 0)

        def FUNC_ARCTANH(self):
            return self.getToken(LaTeXParser.FUNC_ARCTANH, 0)

        def FUNC_ARCSECH(self):
            return self.getToken(LaTeXParser.FUNC_ARCSECH, 0)

        def FUNC_ARCCSCH(self):
            return self.getToken(LaTeXParser.FUNC_ARCCSCH, 0)

        def FUNC_ARCCOTH(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOTH, 0)

        def FUNC_ABS(self):
            return self.getToken(LaTeXParser.FUNC_ABS, 0)

        def FUNC_RE(self):
            return self.getToken(LaTeXParser.FUNC_RE, 0)

        def FUNC_IM(self):
            return self.getToken(LaTeXParser.FUNC_IM, 0)

        def FUNC_ARG(self):
            return self.getToken(LaTeXParser.FUNC_ARG, 0)

        def OVERLINE(self):
            return self.getToken(LaTeXParser.OVERLINE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_normal




    def func_normal(self):

        localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_func_normal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            _la = self._input.LA(1)
            if not((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & 2161730020161085441) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_name




    def func_name(self):

        localctx = LaTeXParser.Func_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_func_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            _la = self._input.LA(1)
            if not(_la==115 or _la==132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_compositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Func_nameContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Func_nameContext,i)


        def CMD_CIRCLE(self):
            return self.getToken(LaTeXParser.CMD_CIRCLE, 0)

        def func_composition(self):
            return self.getTypedRuleContext(LaTeXParser.Func_compositionContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_composition




    def func_composition(self):

        localctx = LaTeXParser.Func_compositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_func_composition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.func_name()
            self.state = 551
            self.match(LaTeXParser.CMD_CIRCLE)
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 552
                self.func_name()
                pass

            elif la_ == 2:
                self.state = 553
                self.func_composition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None # ExprContext
            self.base = None # ExprContext

        def func_normal(self):
            return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)


        def L_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_PAREN)
            else:
                return self.getToken(LaTeXParser.L_PAREN, i)

        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)


        def R_PAREN(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_PAREN)
            else:
                return self.getToken(LaTeXParser.R_PAREN, i)

        def func_arg_noparens(self):
            return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)


        def args(self):
            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)


        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def SINGLE_QUOTES(self):
            return self.getToken(LaTeXParser.SINGLE_QUOTES, 0)

        def func_composition(self):
            return self.getTypedRuleContext(LaTeXParser.Func_compositionContext,0)


        def FUNC_INT(self):
            return self.getToken(LaTeXParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext,0)


        def additive(self):
            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)


        def FUNC_IINT(self):
            return self.getToken(LaTeXParser.FUNC_IINT, 0)

        def MULTI_DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.MULTI_DIFFERENTIAL, 0)

        def FUNC_OINT(self):
            return self.getToken(LaTeXParser.FUNC_OINT, 0)

        def FUNC_SQRT(self):
            return self.getToken(LaTeXParser.FUNC_SQRT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def FUNC_OVERLINE(self):
            return self.getToken(LaTeXParser.FUNC_OVERLINE, 0)

        def FUNC_SUM(self):
            return self.getToken(LaTeXParser.FUNC_SUM, 0)

        def mp(self):
            return self.getTypedRuleContext(LaTeXParser.MpContext,0)


        def subeq(self):
            return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)


        def FUNC_PROD(self):
            return self.getToken(LaTeXParser.FUNC_PROD, 0)

        def FUNC_LIM(self):
            return self.getToken(LaTeXParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)


        def FUNC_MATRIX_START(self):
            return self.getToken(LaTeXParser.FUNC_MATRIX_START, 0)

        def matrix(self):
            return self.getTypedRuleContext(LaTeXParser.MatrixContext,0)


        def FUNC_MATRIX_END(self):
            return self.getToken(LaTeXParser.FUNC_MATRIX_END, 0)

        def FUNC_MATRIX_DETERMINENT_START(self):
            return self.getToken(LaTeXParser.FUNC_MATRIX_DETERMINENT_START, 0)

        def FUNC_MATRIX_DETERMINENT_END(self):
            return self.getToken(LaTeXParser.FUNC_MATRIX_DETERMINENT_END, 0)

        def FUNC_AL_MATRIX_PIECEWISE_START(self):
            return self.getToken(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_START, 0)

        def matrix_piecewise(self):
            return self.getTypedRuleContext(LaTeXParser.Matrix_piecewiseContext,0)


        def FUNC_AL_MATRIX_PIECEWISE_END(self):
            return self.getToken(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_END, 0)

        def FUNC_AR_MATRIX_PIECEWISE_START(self):
            return self.getToken(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_START, 0)

        def FUNC_AR_MATRIX_PIECEWISE_END(self):
            return self.getToken(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_END, 0)

        def FUNC_PIECEWISE_START(self):
            return self.getToken(LaTeXParser.FUNC_PIECEWISE_START, 0)

        def piecewise(self):
            return self.getTypedRuleContext(LaTeXParser.PiecewiseContext,0)


        def FUNC_ARRAY_END(self):
            return self.getToken(LaTeXParser.FUNC_ARRAY_END, 0)

        def FUNC_CALCULATION_START(self):
            return self.getToken(LaTeXParser.FUNC_CALCULATION_START, 0)

        def calculation(self):
            return self.getTypedRuleContext(LaTeXParser.CalculationContext,0)


        def matrix_relation(self):
            return self.getTypedRuleContext(LaTeXParser.Matrix_relationContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func




    def func(self):

        localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self.func_normal()
                self.state = 569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==108:
                        self.state = 557
                        self.subexpr()


                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==109:
                        self.state = 560
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==109:
                        self.state = 563
                        self.supexpr()


                    self.state = 567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==108:
                        self.state = 566
                        self.subexpr()


                    pass


                self.state = 576
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 571
                    self.match(LaTeXParser.L_PAREN)
                    self.state = 572
                    self.func_arg()
                    self.state = 573
                    self.match(LaTeXParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 575
                    self.func_arg_noparens()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                _la = self._input.LA(1)
                if not(_la==115 or _la==132):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 591
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==108:
                        self.state = 579
                        self.subexpr()


                    self.state = 583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==131:
                        self.state = 582
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    pass

                elif la_ == 2:
                    self.state = 586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==131:
                        self.state = 585
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==108:
                        self.state = 588
                        self.subexpr()


                    pass


                self.state = 593
                self.match(LaTeXParser.L_PAREN)
                self.state = 594
                self.args()
                self.state = 595
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 597
                self.match(LaTeXParser.L_PAREN)
                self.state = 598
                self.func_composition()
                self.state = 599
                self.match(LaTeXParser.R_PAREN)
                self.state = 600
                self.match(LaTeXParser.L_PAREN)
                self.state = 601
                self.args()
                self.state = 602
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 604
                self.match(LaTeXParser.FUNC_INT)
                self.state = 611
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [108]:
                    self.state = 605
                    self.subexpr()
                    self.state = 606
                    self.supexpr()
                    pass
                elif token in [109]:
                    self.state = 608
                    self.supexpr()
                    self.state = 609
                    self.subexpr()
                    pass
                elif token in [19, 20, 26, 28, 30, 32, 34, 36, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 87, 88, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 113, 115, 116, 120, 132]:
                    pass
                else:
                    pass
                self.state = 619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 614
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 613
                        self.additive(0)


                    self.state = 616
                    self.match(LaTeXParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 617
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 618
                    self.additive(0)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 621
                self.match(LaTeXParser.FUNC_IINT)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 622
                    self.subexpr()


                self.state = 631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 19)) & ~0x3f) == 0 and ((1 << (_la - 19)) & 6341068275315812995) != 0 or (((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 563101367566001) != 0:
                        self.state = 625
                        self.additive(0)


                    self.state = 628
                    self.match(LaTeXParser.MULTI_DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 629
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 630
                    self.additive(0)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 633
                self.match(LaTeXParser.FUNC_OINT)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 634
                    self.subexpr()


                self.state = 643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                    if la_ == 1:
                        self.state = 637
                        self.additive(0)


                    self.state = 640
                    self.match(LaTeXParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 641
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 642
                    self.additive(0)
                    pass


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 645
                self.match(LaTeXParser.FUNC_SQRT)
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 646
                    self.match(LaTeXParser.L_BRACKET)
                    self.state = 647
                    localctx.root = self.expr()
                    self.state = 648
                    self.match(LaTeXParser.R_BRACKET)


                self.state = 652
                self.match(LaTeXParser.L_BRACE)
                self.state = 653
                localctx.base = self.expr()
                self.state = 654
                self.match(LaTeXParser.R_BRACE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 656
                self.match(LaTeXParser.FUNC_OVERLINE)
                self.state = 657
                self.match(LaTeXParser.L_BRACE)
                self.state = 658
                localctx.base = self.expr()
                self.state = 659
                self.match(LaTeXParser.R_BRACE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 661
                self.match(LaTeXParser.FUNC_SUM)
                self.state = 674
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 662
                    self.subeq()
                    self.state = 663
                    self.supexpr()
                    pass

                elif la_ == 2:
                    self.state = 665
                    self.subexpr()
                    self.state = 666
                    self.supexpr()
                    pass

                elif la_ == 3:
                    self.state = 668
                    self.supexpr()
                    self.state = 669
                    self.subeq()
                    pass

                elif la_ == 4:
                    self.state = 671
                    self.supexpr()
                    self.state = 672
                    self.subexpr()
                    pass


                self.state = 676
                self.mp(0)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 678
                self.match(LaTeXParser.FUNC_PROD)
                self.state = 685
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [108]:
                    self.state = 679
                    self.subeq()
                    self.state = 680
                    self.supexpr()
                    pass
                elif token in [109]:
                    self.state = 682
                    self.supexpr()
                    self.state = 683
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 687
                self.mp(0)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 689
                self.match(LaTeXParser.FUNC_LIM)
                self.state = 690
                self.limit_sub()
                self.state = 691
                self.mp(0)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 693
                self.match(LaTeXParser.FUNC_MATRIX_START)
                self.state = 694
                self.matrix()
                self.state = 695
                self.match(LaTeXParser.FUNC_MATRIX_END)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 697
                self.match(LaTeXParser.FUNC_MATRIX_DETERMINENT_START)
                self.state = 698
                self.matrix()
                self.state = 699
                self.match(LaTeXParser.FUNC_MATRIX_DETERMINENT_END)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 701
                self.match(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_START)
                self.state = 702
                self.matrix_piecewise()
                self.state = 703
                self.match(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_END)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 705
                self.match(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_START)
                self.state = 706
                self.matrix_piecewise()
                self.state = 707
                self.match(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_END)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 709
                self.match(LaTeXParser.L_BRACE)
                self.state = 710
                self.match(LaTeXParser.FUNC_PIECEWISE_START)
                self.state = 711
                self.piecewise()
                self.state = 712
                self.match(LaTeXParser.FUNC_ARRAY_END)
                self.state = 713
                self.match(LaTeXParser.T__2)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 715
                self.match(LaTeXParser.FUNC_CALCULATION_START)
                self.state = 716
                self.calculation()
                self.state = 717
                self.match(LaTeXParser.FUNC_ARRAY_END)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 719
                self.match(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_START)
                self.state = 720
                self.matrix_relation()
                self.state = 721
                self.match(LaTeXParser.FUNC_AL_MATRIX_PIECEWISE_END)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 723
                self.match(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_START)
                self.state = 724
                self.matrix_relation()
                self.state = 725
                self.match(LaTeXParser.FUNC_AR_MATRIX_PIECEWISE_END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def args(self):
            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_args




    def args(self):

        localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_args)
        try:
            self.state = 734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.expr()
                self.state = 730
                self.match(LaTeXParser.T__1)
                self.state = 731
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_limit_sub




    def limit_sub(self):

        localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_limit_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 737
            self.match(LaTeXParser.L_BRACE)
            self.state = 738
            _la = self._input.LA(1)
            if not(_la==115 or _la==132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 739
            self.match(LaTeXParser.LIM_APPROACH_SYM)
            self.state = 740
            self.expr()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 741
                self.match(LaTeXParser.CARET)
                self.state = 747
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [28]:
                    self.state = 742
                    self.match(LaTeXParser.L_BRACE)
                    self.state = 743
                    _la = self._input.LA(1)
                    if not(_la==19 or _la==20):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 744
                    self.match(LaTeXParser.R_BRACE)
                    pass
                elif token in [19]:
                    self.state = 745
                    self.match(LaTeXParser.ADD)
                    pass
                elif token in [20]:
                    self.state = 746
                    self.match(LaTeXParser.SUB)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 751
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_notation_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_set_notation_sub




    def set_notation_sub(self):

        localctx = LaTeXParser.Set_notation_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_set_notation_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(LaTeXParser.L_BRACE)
            self.state = 754
            _la = self._input.LA(1)
            if not(_la==115 or _la==132):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 755
            self.match(LaTeXParser.BAR)
            self.state = 756
            self.relation(0)
            self.state = 757
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_notation_sub_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def set_notation_sub_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Set_notation_sub_exprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Set_notation_sub_exprContext,i)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def SET_ADD(self):
            return self.getToken(LaTeXParser.SET_ADD, 0)

        def SET_SUB(self):
            return self.getToken(LaTeXParser.SET_SUB, 0)

        def SET_INTERSECT(self):
            return self.getToken(LaTeXParser.SET_INTERSECT, 0)

        def set_notation_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Set_notation_subContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_set_notation_sub_expr



    def set_notation_sub_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Set_notation_sub_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_set_notation_sub_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 760
                self.match(LaTeXParser.L_PAREN)
                self.state = 761
                self.set_notation_sub_expr(0)
                self.state = 762
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 763
                self.set_notation_sub_expr(0)
                self.state = 764
                self.match(LaTeXParser.R_PAREN)
                pass
            elif token in [28]:
                self.state = 766
                self.set_notation_sub()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 774
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Set_notation_sub_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_set_notation_sub_expr)
                    self.state = 769
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 770
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 58720256) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 771
                    self.set_notation_sub_expr(4)
                self.state = 776
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Matrix_rowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def AMP(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.AMP)
            else:
                return self.getToken(LaTeXParser.AMP, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix_row




    def matrix_row(self):

        localctx = LaTeXParser.Matrix_rowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_matrix_row)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.expr()
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==112:
                self.state = 778
                self.match(LaTeXParser.AMP)
                self.state = 779
                self.expr()
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatrixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matrix_row(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Matrix_rowContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Matrix_rowContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix




    def matrix(self):

        localctx = LaTeXParser.MatrixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_matrix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.matrix_row()
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 786
                self.match(LaTeXParser.T__3)
                self.state = 787
                self.matrix_row()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg




    def func_arg(self):

        localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_func_arg)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 794
                self.expr()
                self.state = 795
                self.match(LaTeXParser.T__1)
                self.state = 796
                self.func_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg_noparens




    def func_arg_noparens(self):

        localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_func_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subexpr




    def subexpr(self):

        localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 39, 40, 101, 102, 103, 104, 105, 106, 113, 115, 116, 132]:
                self.state = 803
                self.atom()
                pass
            elif token in [28]:
                self.state = 804
                self.match(LaTeXParser.L_BRACE)
                self.state = 805
                self.expr()
                self.state = 806
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supexpr




    def supexpr(self):

        localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(LaTeXParser.CARET)
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 39, 40, 101, 102, 103, 104, 105, 106, 113, 115, 116, 132]:
                self.state = 811
                self.atom()
                pass
            elif token in [28]:
                self.state = 812
                self.match(LaTeXParser.L_BRACE)
                self.state = 813
                self.expr()
                self.state = 814
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subeq




    def subeq(self):

        localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 819
            self.match(LaTeXParser.L_BRACE)
            self.state = 820
            self.equality()
            self.state = 821
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supeq




    def supeq(self):

        localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_supeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 824
            self.match(LaTeXParser.L_BRACE)
            self.state = 825
            self.equality()
            self.state = 826
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)


        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_vector




    def vector(self):

        localctx = LaTeXParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(LaTeXParser.LT)
            self.state = 829
            self.func_arg()
            self.state = 830
            self.match(LaTeXParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Piecewise_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def AMP(self):
            return self.getToken(LaTeXParser.AMP, 0)

        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_piecewise_func




    def piecewise_func(self):

        localctx = LaTeXParser.Piecewise_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_piecewise_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.expr()
            self.state = 833
            self.match(LaTeXParser.AMP)
            self.state = 834
            self.match(LaTeXParser.T__4)
            self.state = 835
            self.relation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PiecewiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def piecewise_func(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Piecewise_funcContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Piecewise_funcContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_piecewise




    def piecewise(self):

        localctx = LaTeXParser.PiecewiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_piecewise)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.piecewise_func()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 838
                self.match(LaTeXParser.T__3)
                self.state = 839
                self.piecewise_func()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_piecewise_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def SEMI_COLON(self):
            return self.getToken(LaTeXParser.SEMI_COLON, 0)

        def AMP(self):
            return self.getToken(LaTeXParser.AMP, 0)

        def OTHERWISE(self):
            return self.getToken(LaTeXParser.OTHERWISE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix_piecewise_func




    def matrix_piecewise_func(self):

        localctx = LaTeXParser.Matrix_piecewise_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_matrix_piecewise_func)
        self._la = 0 # Token type
        try:
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.expr()
                self.state = 847
                _la = self._input.LA(1)
                if not(_la==5 or _la==111 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 848
                self.relation(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 850
                self.expr()
                self.state = 851
                self.match(LaTeXParser.OTHERWISE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_piecewiseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matrix_piecewise_func(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Matrix_piecewise_funcContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Matrix_piecewise_funcContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix_piecewise




    def matrix_piecewise(self):

        localctx = LaTeXParser.Matrix_piecewiseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_matrix_piecewise)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.matrix_piecewise_func()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 856
                self.match(LaTeXParser.T__3)
                self.state = 857
                self.matrix_piecewise_func()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calculation_addContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.NUMBER)
            else:
                return self.getToken(LaTeXParser.NUMBER, i)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def HLINE(self):
            return self.getToken(LaTeXParser.HLINE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation_add




    def calculation_add(self):

        localctx = LaTeXParser.Calculation_addContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_calculation_add)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(LaTeXParser.NUMBER)
            self.state = 864
            self.match(LaTeXParser.T__3)
            self.state = 865
            self.match(LaTeXParser.ADD)
            self.state = 866
            self.match(LaTeXParser.NUMBER)
            self.state = 867
            self.match(LaTeXParser.T__3)
            self.state = 868
            self.match(LaTeXParser.HLINE)
            self.state = 869
            self.match(LaTeXParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calculation_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.NUMBER)
            else:
                return self.getToken(LaTeXParser.NUMBER, i)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def HLINE(self):
            return self.getToken(LaTeXParser.HLINE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation_sub




    def calculation_sub(self):

        localctx = LaTeXParser.Calculation_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_calculation_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(LaTeXParser.NUMBER)
            self.state = 872
            self.match(LaTeXParser.T__3)
            self.state = 873
            self.match(LaTeXParser.SUB)
            self.state = 874
            self.match(LaTeXParser.NUMBER)
            self.state = 875
            self.match(LaTeXParser.T__3)
            self.state = 876
            self.match(LaTeXParser.HLINE)
            self.state = 877
            self.match(LaTeXParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calculation_mulContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.NUMBER)
            else:
                return self.getToken(LaTeXParser.NUMBER, i)

        def HLINE(self):
            return self.getToken(LaTeXParser.HLINE, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation_mul




    def calculation_mul(self):

        localctx = LaTeXParser.Calculation_mulContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_calculation_mul)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(LaTeXParser.NUMBER)
            self.state = 880
            self.match(LaTeXParser.T__3)
            self.state = 881
            _la = self._input.LA(1)
            if not(_la==21 or _la==98):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 882
            self.match(LaTeXParser.NUMBER)
            self.state = 883
            self.match(LaTeXParser.T__3)
            self.state = 884
            self.match(LaTeXParser.HLINE)
            self.state = 885
            self.match(LaTeXParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calculation_divContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.NUMBER)
            else:
                return self.getToken(LaTeXParser.NUMBER, i)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def OVERLINE(self):
            return self.getToken(LaTeXParser.OVERLINE, 0)

        def SMASH_BIG(self):
            return self.getToken(LaTeXParser.SMASH_BIG, 0)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation_div




    def calculation_div(self):

        localctx = LaTeXParser.Calculation_divContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_calculation_div)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(LaTeXParser.NUMBER)
            self.state = 888
            self.match(LaTeXParser.T__3)
            self.state = 889
            self.match(LaTeXParser.NUMBER)
            self.state = 890
            self.match(LaTeXParser.L_BRACE)
            self.state = 891
            self.match(LaTeXParser.OVERLINE)
            self.state = 892
            self.match(LaTeXParser.L_BRACE)
            self.state = 893
            self.match(LaTeXParser.SMASH_BIG)
            self.state = 894
            self.match(LaTeXParser.NUMBER)
            self.state = 895
            self.match(LaTeXParser.R_BRACE)
            self.state = 896
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CalculationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calculation_add(self):
            return self.getTypedRuleContext(LaTeXParser.Calculation_addContext,0)


        def calculation_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Calculation_subContext,0)


        def calculation_mul(self):
            return self.getTypedRuleContext(LaTeXParser.Calculation_mulContext,0)


        def calculation_div(self):
            return self.getTypedRuleContext(LaTeXParser.Calculation_divContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_calculation




    def calculation(self):

        localctx = LaTeXParser.CalculationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_calculation)
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 898
                self.calculation_add()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.calculation_sub()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.calculation_mul()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 901
                self.calculation_div()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Matrix_relationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_matrix_relation




    def matrix_relation(self):

        localctx = LaTeXParser.Matrix_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_matrix_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.relation(0)
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 905
                self.match(LaTeXParser.T__3)
                self.state = 906
                self.relation(0)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[3] = self.relation_sempred
        self._predicates[6] = self.struct_relation_sempred
        self._predicates[7] = self.struct_expr_sempred
        self._predicates[13] = self.interval_expr_sempred
        self._predicates[16] = self.additive_sempred
        self._predicates[17] = self.mp_sempred
        self._predicates[18] = self.mp_nofunc_sempred
        self._predicates[27] = self.exp_sempred
        self._predicates[28] = self.exp_nofunc_sempred
        self._predicates[51] = self.set_notation_sub_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)


    def struct_relation_sempred(self, localctx:Struct_relationContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)


    def struct_expr_sempred(self, localctx:Struct_exprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 3)


    def interval_expr_sempred(self, localctx:Interval_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 3)


    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)


    def mp_sempred(self, localctx:MpContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)


    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)


    def exp_sempred(self, localctx:ExpContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)


    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)


    def set_notation_sub_expr_sempred(self, localctx:Set_notation_sub_exprContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 3)





